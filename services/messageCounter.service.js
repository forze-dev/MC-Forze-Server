import cron from 'node-cron';
import { pool } from './db.service.js';
import {
	getAllDailyMessageCounts,
	getAllUserBalances,
	getPendingUpdates,
	clearPendingUpdates,
	redisClient,
	CACHE_KEYS
} from './redis.service.js';

const BATCH_SIZE = 50; // –†–æ–∑–º—ñ—Ä –ø–∞–∫–µ—Ç—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

/**
 * –†–æ–∑–±–∏–≤–∞—î –º–∞—Å–∏–≤ –Ω–∞ –º–µ–Ω—à—ñ —á–∞—Å—Ç–∏–Ω–∏
 * @param {Array} array –ú–∞—Å–∏–≤ –¥–ª—è —Ä–æ–∑–±–∏—Ç—Ç—è
 * @param {number} size –†–æ–∑–º—ñ—Ä –ø–∞–∫–µ—Ç—É
 * @returns {Array<Array>} –ú–∞—Å–∏–≤ –ø–∞–∫–µ—Ç—ñ–≤
 */
const chunkArray = (array, size) => {
	const chunks = [];
	for (let i = 0; i < array.length; i += size) {
		chunks.push(array.slice(i, i + size));
	}
	return chunks;
};

/**
 * –û–±—Ä–æ–±–ª—è—î –æ–¥–∏–Ω –ø–∞–∫–µ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
 * @param {string[]} userBatch ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
 * @param {Object} messageCounts –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @param {Object} balanceCounts –ë–∞–ª–∞–Ω—Å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @returns {Promise<string[]>} –£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω—ñ –∫–ª—é—á—ñ
 */
const processBatch = async (userBatch, messageCounts, balanceCounts) => {
	const conn = await pool.getConnection();
	const now = Math.floor(Date.now() / 1000);
	const processedKeys = [];

	try {
		await conn.beginTransaction();

		for (const telegramId of userBatch) {
			// –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
			const messageCount = messageCounts[telegramId] ? parseInt(messageCounts[telegramId]) : 0;
			if (messageCount === 0) continue;

			// –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å
			const balanceCount = balanceCounts[telegramId] ? parseInt(balanceCounts[telegramId]) : 0;

			// –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ –±–∞–ª–∞–Ω—Å—ñ–≤
			const processedMessageCount = await redisClient.hGet(CACHE_KEYS.USER_PROCESSED_MESSAGES, telegramId) || 0;
			const processedBalanceCount = await redisClient.hGet(CACHE_KEYS.USER_PROCESSED_BALANCES, telegramId) || 0;

			// –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —á–∏—Å–ª–∞
			const processedMessageCountNum = parseInt(processedMessageCount);
			const processedBalanceCountNum = parseInt(processedBalanceCount);

			// –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –±–∞–ª–∞–Ω—Å –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ –±–∞–∑–∏
			const newMessages = messageCount - processedMessageCountNum;
			const newBalance = balanceCount - processedBalanceCountNum;

			// –í–∏–∫–æ–Ω—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–∏—à–µ —è–∫—â–æ —î –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –±–∞–ª–∞–Ω—Å
			if (newMessages > 0 || newBalance > 0) {
				await conn.query(
					'UPDATE users SET messages_count = messages_count + ?, game_balance = game_balance + ?, updated_at = ? WHERE telegram_id = ?',
					[newMessages, newBalance, now, telegramId]
				);

				// –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö —É Redis
				await redisClient.hSet(CACHE_KEYS.USER_PROCESSED_MESSAGES, telegramId, messageCount.toString());
				await redisClient.hSet(CACHE_KEYS.USER_PROCESSED_BALANCES, telegramId, balanceCount.toString());

				console.log(`‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${telegramId}: +${newMessages} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, +${newBalance} –º–æ–Ω–µ—Ç`);
			} else {
				console.log(`‚ÑπÔ∏è –î–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${telegramId} –Ω–µ–º–∞—î –Ω–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${messageCount}/${processedMessageCountNum}, –±–∞–ª–∞–Ω—Å: ${balanceCount}/${processedBalanceCountNum})`);
			}

			processedKeys.push(telegramId);
		}

		await conn.commit();
		return processedKeys;
	} catch (error) {
		await conn.rollback();
		console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–∞–∫–µ—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
		return [];
	} finally {
		conn.release();
	}
};

/**
 * –û–Ω–æ–≤–ª—é—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ –±–∞–ª–∞–Ω—Å –≥—Ä–∞–≤—Ü—ñ–≤ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–∞–Ω–∏—Ö –∑ Redis
 * @returns {Promise<number>} –ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
 */
const updateUserBalances = async () => {
	console.log('üîÑ –ó–∞–ø—É—Å–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...');

	try {
		// –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
		const pendingUsers = await getPendingUpdates();

		if (pendingUsers.length === 0) {
			console.log('üì® –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è');
			return 0;
		}

		console.log(`üì® –ó–Ω–∞–π–¥–µ–Ω–æ ${pendingUsers.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è`);

		// –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ –±–∞–ª–∞–Ω—Å—ñ–≤
		const messageCounts = await getAllDailyMessageCounts();
		const balanceCounts = await getAllUserBalances();

		// –†–æ–∑–±–∏–≤–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–∞ –ø–∞–∫–µ—Ç–∏
		const batches = chunkArray(pendingUsers, BATCH_SIZE);

		let totalProcessed = 0;
		let allProcessedKeys = [];

		// –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω –ø–∞–∫–µ—Ç
		for (const batch of batches) {
			const processedKeys = await processBatch(batch, messageCounts, balanceCounts);
			allProcessedKeys = [...allProcessedKeys, ...processedKeys];
			totalProcessed += processedKeys.length;

			// –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –º—ñ–∂ –ø–∞–∫–µ—Ç–∞–º–∏, —â–æ–± –∑–º–µ–Ω—à–∏—Ç–∏ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
			if (batches.length > 1) {
				await new Promise(resolve => setTimeout(resolve, 1000));
			}
		}

		// –û—á–∏—â–∞—î–º–æ –æ–±—Ä–æ–±–ª–µ–Ω—ñ –¥–∞–Ω—ñ –∑ –º–Ω–æ–∂–∏–Ω–∏ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
		if (allProcessedKeys.length > 0) {
			await clearPendingUpdates(allProcessedKeys);
		}

		console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–∞–Ω—ñ –¥–ª—è ${totalProcessed} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤`);

		return totalProcessed;
	} catch (error) {
		console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
		return 0;
	}
};

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –∫–ª—é—á –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –±–∞–ª–∞–Ω—Å—ñ–≤ —É Redis,
 * —è–∫—â–æ –≤—ñ–Ω —â–µ –Ω–µ —ñ—Å–Ω—É—î
 */
const initializeProcessedBalances = async () => {
	try {
		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–ª—é—á –¥–ª—è –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –±–∞–ª–∞–Ω—Å—ñ–≤
		const exists = await redisClient.exists(CACHE_KEYS.USER_PROCESSED_BALANCES);

		if (!exists) {
			console.log('üì® –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–µ—à—É –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –±–∞–ª–∞–Ω—Å—ñ–≤...');

			// –û—Ç—Ä–∏–º—É—î–º–æ —á–∞—Å –∫—ñ–Ω—Ü—è –ø–µ—Ä—ñ–æ–¥—É –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è TTL
			const periodEnd = await redisClient.get(CACHE_KEYS.PERIOD_END_TIME);

			if (periodEnd) {
				const now = Date.now();
				const expirySeconds = Math.floor((parseInt(periodEnd) - now) / 1000);

				if (expirySeconds > 0) {
					// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –∂–∏—Ç—Ç—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
					await redisClient.expire(CACHE_KEYS.USER_PROCESSED_BALANCES, expirySeconds);
				}
			}
		}
	} catch (error) {
		console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–µ—à—É –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –±–∞–ª–∞–Ω—Å—ñ–≤:', error);
	}
};

/**
 * –ó–∞–ø—É—Å–∫–∞—î –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤ –∑–∞ —Ä–æ–∑–∫–ª–∞–¥–æ–º cron
 */
const startPeriodicUpdates = async () => {
	console.log('‚è±Ô∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ —Ä–æ–∑–∫–ª–∞–¥–æ–º cron');

	// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–ª—é—á –¥–ª—è –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –±–∞–ª–∞–Ω—Å—ñ–≤
	await initializeProcessedBalances();

	// –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
	cron.schedule('*/5 * * * *', async () => {
		try {
			await updateUserBalances();
		} catch (error) {
			console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–ª–∞–Ω–æ–≤–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', error);
		}
	});

	// –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—à–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 1 —Ö–≤–∏–ª–∏–Ω—É –ø—ñ—Å–ª—è –∑–∞–ø—É—Å–∫—É
	setTimeout(updateUserBalances, 60 * 1000);
};

export {
	updateUserBalances,
	startPeriodicUpdates
};