import cron from 'node-cron';
import { pool } from './db.service.js';
import {
	getAllDailyMessageCounts,
	getPendingUpdates,
	clearPendingUpdates
} from './redis.service.js';

const BATCH_SIZE = 50; // –†–æ–∑–º—ñ—Ä –ø–∞–∫–µ—Ç—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

/**
 * –†–æ–∑–±–∏–≤–∞—î –º–∞—Å–∏–≤ –Ω–∞ –º–µ–Ω—à—ñ —á–∞—Å—Ç–∏–Ω–∏
 * @param {Array} array –ú–∞—Å–∏–≤ –¥–ª—è —Ä–æ–∑–±–∏—Ç—Ç—è
 * @param {number} size –†–æ–∑–º—ñ—Ä –ø–∞–∫–µ—Ç—É
 * @returns {Array<Array>} –ú–∞—Å–∏–≤ –ø–∞–∫–µ—Ç—ñ–≤
 */
const chunkArray = (array, size) => {
	const chunks = [];
	for (let i = 0; i < array.length; i += size) {
		chunks.push(array.slice(i, i + size));
	}
	return chunks;
};

/**
 * –û–±—Ä–æ–±–ª—è—î –æ–¥–∏–Ω –ø–∞–∫–µ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
 * @param {string[]} userBatch ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
 * @param {Object} messageCounts –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @returns {Promise<string[]>} –£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω—ñ –∫–ª—é—á—ñ
 */
const processBatch = async (userBatch, messageCounts) => {
	const conn = await pool.getConnection();
	const now = Math.floor(Date.now() / 1000);
	const processedKeys = [];

	try {
		await conn.beginTransaction();

		for (const telegramId of userBatch) {
			// –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –∫–ª—é—á—ñ –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
			const today = new Date().toISOString().split('T')[0];
			const key = `${telegramId}:${today}`;

			const count = messageCounts[key];
			if (!count) continue;

			const messageCount = parseInt(count);

			// –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
			await conn.query(
				'UPDATE users SET messages_count = messages_count + ?, game_balance = game_balance + ?, updated_at = ? WHERE telegram_id = ?',
				[messageCount, messageCount, now, telegramId]
			);

			processedKeys.push(key);
			console.log(`‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –±–∞–ª–∞–Ω—Å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${telegramId}: +${messageCount} –º–æ–Ω–µ—Ç`);
		}

		await conn.commit();
		return processedKeys;
	} catch (error) {
		await conn.rollback();
		console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–∞–∫–µ—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
		return [];
	} finally {
		conn.release();
	}
};

/**
 * –û–Ω–æ–≤–ª—é—î –±–∞–ª–∞–Ω—Å –≥—Ä–∞–≤—Ü—ñ–≤ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–∞–Ω–∏—Ö –∑ Redis
 * @returns {Promise<number>} –ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
 */
const updateUserBalances = async () => {
	console.log('üîÑ –ó–∞–ø—É—Å–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –≥—Ä–∞–≤—Ü—ñ–≤...');

	try {
		// –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
		const pendingUsers = await getPendingUpdates();

		if (pendingUsers.length === 0) {
			console.log('üì® –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è');
			return 0;
		}

		console.log(`üì® –ó–Ω–∞–π–¥–µ–Ω–æ ${pendingUsers.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É`);

		// –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
		const messageCounts = await getAllDailyMessageCounts();

		// –†–æ–∑–±–∏–≤–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–∞ –ø–∞–∫–µ—Ç–∏
		const batches = chunkArray(pendingUsers, BATCH_SIZE);

		let totalProcessed = 0;
		let allProcessedKeys = [];

		// –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω –ø–∞–∫–µ—Ç
		for (const batch of batches) {
			const processedKeys = await processBatch(batch, messageCounts);
			allProcessedKeys = [...allProcessedKeys, ...processedKeys];
			totalProcessed += batch.length;

			// –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –º—ñ–∂ –ø–∞–∫–µ—Ç–∞–º–∏, —â–æ–± –∑–º–µ–Ω—à–∏—Ç–∏ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
			if (batches.length > 1) {
				await new Promise(resolve => setTimeout(resolve, 1000));
			}
		}

		// –û—á–∏—â–∞—î–º–æ –æ–±—Ä–æ–±–ª–µ–Ω—ñ –¥–∞–Ω—ñ
		if (pendingUsers.length > 0) {
			await clearPendingUpdates(pendingUsers);
		}

		if (allProcessedKeys.length > 0) {
			// –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –Ω–µ –æ—á–∏—â–∞—é—Ç—å—Å—è —Ç—É—Ç
			// –ë—É–¥—É—Ç—å –æ—á–∏—â–µ–Ω—ñ –ø—ñ–¥ —á–∞—Å —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Å–∫–∏–¥–∞–Ω–Ω—è —á–µ—Ä–µ–∑ sheduleRewards.service.js
			console.log(`üíæ –ó–∞–ª–∏—à–µ–Ω–æ ${allProcessedKeys.length} –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–≤—ñ—Ç—É`);
		}

		console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ –±–∞–ª–∞–Ω—Å –¥–ª—è ${totalProcessed} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤`);

		return totalProcessed;
	} catch (error) {
		console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –≥—Ä–∞–≤—Ü—ñ–≤:', error);
		return 0;
	}
};

/**
 * –ó–∞–ø—É—Å–∫–∞—î –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –≥—Ä–∞–≤—Ü—ñ–≤ –∑–∞ —Ä–æ–∑–∫–ª–∞–¥–æ–º cron
 */
const startPeriodicUpdates = () => {
	console.log('‚è±Ô∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∑–∞ —Ä–æ–∑–∫–ª–∞–¥–æ–º cron');

	// –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
	cron.schedule('*/5 * * * *', async () => {
		try {
			await updateUserBalances();
		} catch (error) {
			console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–ª–∞–Ω–æ–≤–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', error);
		}
	});

	// –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—à–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 1 —Ö–≤–∏–ª–∏–Ω—É –ø—ñ—Å–ª—è –∑–∞–ø—É—Å–∫—É
	setTimeout(updateUserBalances, 60 * 1000);
};

export {
	updateUserBalances,
	startPeriodicUpdates
};