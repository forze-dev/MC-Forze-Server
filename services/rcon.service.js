import { Rcon } from 'rcon-client';
import 'dotenv/config';

class MinecraftRconService {
	constructor() {
		this.connections = new Map(); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–ª—è –∫—ñ–ª—å–∫–æ—Ö —Å–µ—Ä–≤–µ—Ä—ñ–≤
		this.config = {
			servers: [
				{
					id: 'MFS',
					host: process.env.RCON_HOST_MFS || 'localhost',
					port: parseInt(process.env.RCON_PORT_MFS) || 25575,
					password: process.env.RCON_PASSWORD_MFS || 'your_rcon_password'
				}
			],
			reconnectInterval: 5000, // 5 —Å–µ–∫—É–Ω–¥
			maxRetries: 3
		};
	}

	/**
	 * –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ RCON —Å–µ—Ä–≤–µ—Ä–∞
	 * @param {string} serverId ID —Å–µ—Ä–≤–µ—Ä–∞
	 * @returns {Promise<Rcon|null>}
	 */
	async connect(serverId) {
		try {
			const serverConfig = this.config.servers.find(s => s.id === serverId);
			if (!serverConfig) {
				throw new Error(`–°–µ—Ä–≤–µ—Ä –∑ ID ${serverId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
			}

			// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∞–∫—Ç–∏–≤–Ω–µ –∑'—î–¥–Ω–∞–Ω–Ω—è
			if (this.connections.has(serverId)) {
				const existingConnection = this.connections.get(serverId);
				if (existingConnection.socket && !existingConnection.socket.destroyed) {
					return existingConnection;
				}
			}

			console.log(`üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ RCON —Å–µ—Ä–≤–µ—Ä–∞ ${serverId} (${serverConfig.host}:${serverConfig.port})`);

			const rcon = await Rcon.connect({
				host: serverConfig.host,
				port: serverConfig.port,
				password: serverConfig.password,
				timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
			});

			// –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
			rcon.on('connect', () => {
				console.log(`‚úÖ RCON –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ —Å–µ—Ä–≤–µ—Ä–∞ ${serverId}`);
			});

			rcon.on('authenticated', () => {
				console.log(`üîê RCON –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ ${serverId}`);
			});

			rcon.on('error', (error) => {
				console.error(`‚ùå RCON –ø–æ–º–∏–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ ${serverId}:`, error);
				this.connections.delete(serverId);
			});

			rcon.on('end', () => {
				console.log(`üîå RCON –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º ${serverId} –∑–∞–∫—Ä–∏—Ç–æ`);
				this.connections.delete(serverId);
			});

			// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
			this.connections.set(serverId, rcon);
			return rcon;

		} catch (error) {
			console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è RCON –¥–æ —Å–µ—Ä–≤–µ—Ä–∞ ${serverId}:`, error);
			return null;
		}
	}

	/**
	 * –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
	 * @param {string} serverId ID —Å–µ—Ä–≤–µ—Ä–∞
	 * @param {string} command –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
	 * @param {number} maxRetries –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±
	 * @returns {Promise<{success: boolean, response?: string, error?: string}>}
	 */
	async executeCommand(serverId, command, maxRetries = 3) {
		let retries = 0;

		while (retries < maxRetries) {
			try {
				let rcon = this.connections.get(serverId);

				// –Ø–∫—â–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –Ω–µ–º–∞—î –∞–±–æ –≤–æ–Ω–æ –∑—Ä—É–π–Ω–æ–≤–∞–Ω–µ, –ø—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è
				if (!rcon || rcon.socket?.destroyed) {
					rcon = await this.connect(serverId);
				}

				if (!rcon) {
					throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ RCON');
				}

				console.log(`üéØ –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ ${serverId}: ${command}`);

				const response = await rcon.send(command);

				console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ ${serverId}`);

				return {
					success: true,
					response: response || '–ö–æ–º–∞–Ω–¥–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ'
				};

			} catch (error) {
				retries++;
				console.error(`‚ùå –°–ø—Ä–æ–±–∞ ${retries}/${maxRetries} –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ ${serverId} –Ω–µ–≤–¥–∞–ª–∞:`, error);

				// –í–∏–¥–∞–ª—è—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
				this.connections.delete(serverId);

				if (retries < maxRetries) {
					console.log(`‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è ${this.config.reconnectInterval}ms –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é...`);
					await new Promise(resolve => setTimeout(resolve, this.config.reconnectInterval));
				} else {
					return {
						success: false,
						error: `–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É –ø—ñ—Å–ª—è ${maxRetries} —Å–ø—Ä–æ–±: ${error.message}`
					};
				}
			}
		}
	}

	/**
	 * –ú–µ—Ç–æ–¥–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö —ñ–≥—Ä–æ–≤–∏—Ö –¥—ñ–π
	 */

	/**
	 * –í–∏–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –≥—Ä–∞–≤—Ü—é
	 * @param {string} serverId ID —Å–µ—Ä–≤–µ—Ä–∞
	 * @param {string} playerName –ù—ñ–∫ –≥—Ä–∞–≤—Ü—è
	 * @param {string} itemId ID –ø—Ä–µ–¥–º–µ—Ç–∞ (minecraft:diamond)
	 * @param {number} amount –ö—ñ–ª—å–∫—ñ—Å—Ç—å
	 * @returns {Promise<{success: boolean, response?: string, error?: string}>}
	 */
	async giveItem(serverId, playerName, itemId, amount = 1) {
		const command = `give ${playerName} ${itemId} ${amount}`;
		return await this.executeCommand(serverId, command);
	}

	/**
	 * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–≥—Ä–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º—É
	 * @param {string} serverId ID —Å–µ—Ä–≤–µ—Ä–∞  
	 * @param {string} playerName –ù—ñ–∫ –≥—Ä–∞–≤—Ü—è
	 * @param {string} gamemode –Ü–≥—Ä–æ–≤–∏–π —Ä–µ–∂–∏–º (survival, creative, adventure, spectator)
	 * @returns {Promise<{success: boolean, response?: string, error?: string}>}
	 */
	async setGamemode(serverId, playerName, gamemode) {
		const command = `gamemode ${gamemode} ${playerName}`;
		return await this.executeCommand(serverId, command);
	}

	/**
	 * –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü—ñ—è –≥—Ä–∞–≤—Ü—è
	 * @param {string} serverId ID —Å–µ—Ä–≤–µ—Ä–∞
	 * @param {string} playerName –ù—ñ–∫ –≥—Ä–∞–≤—Ü—è
	 * @param {number} x –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X
	 * @param {number} y –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y
	 * @param {number} z –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Z
	 * @returns {Promise<{success: boolean, response?: string, error?: string}>}
	 */
	async teleportPlayer(serverId, playerName, x, y, z) {
		const command = `tp ${playerName} ${x} ${y} ${z}`;
		return await this.executeCommand(serverId, command);
	}

	/**
	 * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—é
	 * @param {string} serverId ID —Å–µ—Ä–≤–µ—Ä–∞
	 * @param {string} playerName –ù—ñ–∫ –≥—Ä–∞–≤—Ü—è
	 * @param {string} message –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
	 * @returns {Promise<{success: boolean, response?: string, error?: string}>}
	 */
	async tellPlayer(serverId, playerName, message) {
		const command = `tell ${playerName} ${message}`;
		return await this.executeCommand(serverId, command);
	}

	/**
	 * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –≥—Ä–∞–≤—Ü—è–º
	 * @param {string} serverId ID —Å–µ—Ä–≤–µ—Ä–∞
	 * @param {string} message –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
	 * @returns {Promise<{success: boolean, response?: string, error?: string}>}
	 */
	async broadcastMessage(serverId, message) {
		const command = `say ${message}`;
		return await this.executeCommand(serverId, command);
	}

	/**
	 * –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –≤—ñ–¥ —ñ–º–µ–Ω—ñ –≥—Ä–∞–≤—Ü—è (—è–∫—â–æ —î –ø—Ä–∞–≤–∞)
	 * @param {string} serverId ID —Å–µ—Ä–≤–µ—Ä–∞
	 * @param {string} playerName –ù—ñ–∫ –≥—Ä–∞–≤—Ü—è
	 * @param {string} command –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
	 * @returns {Promise<{success: boolean, response?: string, error?: string}>}
	 */
	async executeAsPlayer(serverId, playerName, command) {
		const fullCommand = `execute as ${playerName} run ${command}`;
		return await this.executeCommand(serverId, fullCommand);
	}

	/**
	 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –æ–Ω–ª–∞–π–Ω –≥—Ä–∞–≤—Ü—ñ–≤
	 * @param {string} serverId ID —Å–µ—Ä–≤–µ—Ä–∞
	 * @returns {Promise<{success: boolean, players?: string[], error?: string}>}
	 */
	async getOnlinePlayers(serverId) {
		try {
			const result = await this.executeCommand(serverId, 'list');

			if (result.success && result.response) {
				// –û—á–∏—â–∞—î–º–æ –∫–æ–ª—å–æ—Ä–æ–≤—ñ –∫–æ–¥–∏ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
				const cleanResponse = result.response.replace(/¬ß[0-9a-fk-or]/gi, '');

				console.log("[RCON CLEAN] -", cleanResponse);

				// –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≥—Ä–∞–≤—Ü—ñ–≤
				// –®—É–∫–∞—î–º–æ —à–∞–±–ª–æ–Ω –¥–ª—è –≤–∞—à–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
				let players = [];

				// –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –≥—Ä–∞–≤—Ü—ñ–≤ —É —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
				// –§–æ—Ä–º–∞—Ç 1: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π Minecraft "There are X of a max of Y players online: player1, player2"
				const standardMatch = cleanResponse.match(/There are \d+ (?:of a max of|out of maximum) \d+ players online[:.]\s*(.+)/i);

				if (standardMatch && standardMatch[1] && standardMatch[1].trim() !== '') {
					players = standardMatch[1].split(',').map(name => name.trim()).filter(name => name.length > 0);
				} else {
					// –§–æ—Ä–º–∞—Ç 2: –≤–∞—à –∫–∞—Å—Ç–æ–º–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∑ –Ω–æ–≤–∏–º–∏ —Ä—è–¥–∫–∞–º–∏
					// –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —Ä—è–¥–∫–∏ —ñ —à—É–∫–∞—î–º–æ –≥—Ä–∞–≤—Ü—ñ–≤
					const lines = cleanResponse.split('\n');

					for (const line of lines) {
						// –®—É–∫–∞—î–º–æ —Ä—è–¥–∫–∏ –∑ —Ñ–æ—Ä–º–∞—Ç–æ–º "—Ä–æ–ª—å: –Ω—ñ–∫–Ω–µ–π–º"
						const playerMatch = line.match(/^([^:]+):\s*(.+)$/);
						if (playerMatch && playerMatch[1] && playerMatch[2]) {
							const role = playerMatch[1].trim();
							const playerName = playerMatch[2].trim();
							if (playerName && playerName.length > 0 && role && role.length > 0) {
								// –§–æ—Ä–º–∞—Ç—É—î–º–æ —è–∫ "[–†–æ–ª—å] –ù—ñ–∫–Ω–µ–π–º"
								players.push(`[${role}] ${playerName}`);
							}
						}
					}
				}

				return {
					success: true,
					players: players
				};
			}

			return result;
		} catch (error) {
			return {
				success: false,
				error: error.message
			};
		}
	}

	/**
	 * –ó–∞–∫—Ä–∏—Ç—Ç—è –≤—Å—ñ—Ö –∑'—î–¥–Ω–∞–Ω—å
	 */
	async disconnect(serverId = null) {
		try {
			if (serverId) {
				// –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –∑'—î–¥–Ω–∞–Ω–Ω—è
				const rcon = this.connections.get(serverId);
				if (rcon) {
					await rcon.end();
					this.connections.delete(serverId);
					console.log(`üîå RCON –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º ${serverId} –∑–∞–∫—Ä–∏—Ç–æ`);
				}
			} else {
				// –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –≤—Å—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è
				for (const [id, rcon] of this.connections) {
					try {
						await rcon.end();
						console.log(`üîå RCON –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º ${id} –∑–∞–∫—Ä–∏—Ç–æ`);
					} catch (error) {
						console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è RCON –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º ${id}:`, error);
					}
				}
				this.connections.clear();
			}
		} catch (error) {
			console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è RCON –∑\'—î–¥–Ω–∞–Ω—å:', error);
		}
	}

	/**
	 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –∑'—î–¥–Ω–∞–Ω–Ω—è
	 * @param {string} serverId ID —Å–µ—Ä–≤–µ—Ä–∞
	 * @returns {boolean}
	 */
	isConnected(serverId) {
		const rcon = this.connections.get(serverId);
		return rcon && rcon.socket && !rcon.socket.destroyed;
	}

	/**
	 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤—Å—ñ—Ö –∑'—î–¥–Ω–∞–Ω—å
	 * @returns {Object}
	 */
	getConnectionStatus() {
		const status = {};
		for (const serverId of this.config.servers.map(s => s.id)) {
			status[serverId] = this.isConnected(serverId);
		}
		return status;
	}
}

// –°—Ç–≤–æ—Ä—é—î–º–æ —î–¥–∏–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤—ñ—Å—É
const rconService = new MinecraftRconService();

// –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É
process.on('SIGINT', async () => {
	console.log('üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–∫—Ä–∏–≤–∞—é RCON –∑\'—î–¥–Ω–∞–Ω–Ω—è...');
	await rconService.disconnect();
});

process.on('SIGTERM', async () => {
	console.log('üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–∫—Ä–∏–≤–∞—é RCON –∑\'—î–¥–Ω–∞–Ω–Ω—è...');
	await rconService.disconnect();
});

export default rconService;