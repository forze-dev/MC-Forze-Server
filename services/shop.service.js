import { pool } from '../services/db.service.js';
import rconService from '../services/rcon.service.js';
import cron from 'node-cron';

class ShopService {
	constructor() {
		this.processing = false;
		this.maxRetries = 3;
		this.retryDelay = 5000; // 5 —Å–µ–∫—É–Ω–¥
	}

	/**
	 * –û–±—Ä–æ–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä—É
	 * @param {Object} purchaseData - –î–∞–Ω—ñ –ø—Ä–æ –ø–æ–∫—É–ø–∫—É
	 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–æ–±–∫–∏
	 */
	async processPurchase(purchaseData) {
		const { telegramId, productId, minecraftNick, quantity = 1, purchaseId } = purchaseData;

		if (!purchaseId) {
			throw new Error('Purchase ID —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º');
		}

		try {
			const conn = await pool.getConnection();

			try {
				await conn.beginTransaction();

				// –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≤–∞—Ä
				const [products] = await conn.query(
					'SELECT * FROM products WHERE id = ? AND is_active = 1',
					[productId]
				);

				if (products.length === 0) {
					throw new Error('–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π');
				}

				const product = products[0];

				// –ü–∞—Ä—Å–∏–º–æ execution_config —è–∫—â–æ –≤—ñ–Ω —î
				if (product.execution_config && typeof product.execution_config === 'string') {
					try {
						product.execution_config = JSON.parse(product.execution_config);
					} catch (e) {
						console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É execution_config:', e);
						product.execution_config = null;
					}
				}

				let result = {};

				// –û–±—Ä–æ–±–ª—è—î–º–æ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É —Ç–æ–≤–∞—Ä—É
				switch (product.product_type) {
					case 'item':
						result = await this.processItemPurchase(conn, product, purchaseData);
						break;
					case 'subscription':
						result = await this.processSubscriptionPurchase(conn, product, purchaseData);
						break;
					case 'whitelist':
						result = await this.processWhitelistPurchase(conn, product, purchaseData);
						break;
					case 'rank':
						result = await this.processRankPurchase(conn, product, purchaseData);
						break;
					case 'service':
						result = await this.processServicePurchase(conn, product, purchaseData);
						break;
					case 'command':
						result = await this.processCommandPurchase(conn, product, purchaseData);
						break;
					default:
						throw new Error(`–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø —Ç–æ–≤–∞—Ä—É: ${product.product_type}`);
				}

				await conn.commit();
				return { success: true, ...result };

			} catch (error) {
				await conn.rollback();
				throw error;
			} finally {
				conn.release();
			}

		} catch (error) {
			console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–∫—É–ø–∫–∏:', error);
			return { success: false, error: error.message };
		}
	}

	/**
	 * –û–±—Ä–æ–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–¥–º–µ—Ç—É
	 */
	async processItemPurchase(conn, product, purchaseData) {
		const { telegramId, minecraftNick, quantity = 1, purchaseId } = purchaseData;

		if (product.auto_execute) {
			return await this.executeProductCommands(conn, product, purchaseData);
		} else {
			// –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
			await this.createExecutionRecord(conn, {
				purchaseId,
				telegramId,
				productId: product.id,
				executionType: 'item_give',
				status: 'manual_required'
			});

			return {
				message: '–¢–æ–≤–∞—Ä –±—É–¥–µ –≤–∏–¥–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤—Ä—É—á–Ω—É',
				requiresManualAction: true
			};
		}
	}

	/**
	 * –û–±—Ä–æ–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏
	 */
	async processSubscriptionPurchase(conn, product, purchaseData) {
		const { telegramId, minecraftNick, purchaseId } = purchaseData;
		const now = Math.floor(Date.now() / 1000);
		const endDate = now + (product.subscription_duration * 24 * 60 * 60);

		// –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –ø—ñ–¥–ø–∏—Å–∫–∏
		await conn.query(
			`INSERT INTO subscriptions 
             (telegram_id, product_id, minecraft_nick, start_date, end_date, is_active, created_at) 
             VALUES (?, ?, ?, ?, ?, 1, ?)`,
			[telegramId, product.id, minecraftNick, now, endDate, now]
		);

		// –í–∏–∫–æ–Ω—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó
		if (product.auto_execute) {
			return await this.executeProductCommands(conn, product, purchaseData);
		}

		return {
			message: '–ü—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞',
			subscriptionEnd: endDate
		};
	}

	/**
	 * –û–±—Ä–æ–±–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –≤–∞–π—Ç–ª—ñ—Å—Ç
	 */
	async processWhitelistPurchase(conn, product, purchaseData) {
		if (product.auto_execute) {
			return await this.executeProductCommands(conn, product, purchaseData);
		}

		const { purchaseId, telegramId } = purchaseData;
		await this.createExecutionRecord(conn, {
			purchaseId,
			telegramId,
			productId: product.id,
			executionType: 'whitelist_add',
			status: 'manual_required'
		});

		return {
			message: '–ó–∞–ø–∏—Ç –Ω–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –≤–∞–π—Ç–ª—ñ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ',
			requiresManualAction: true
		};
	}

	/**
	 * –û–±—Ä–æ–±–∫–∞ –ø—Ä–∏—Å–≤–æ—î–Ω–Ω—è —Ä–∞–Ω–≥—É
	 */
	async processRankPurchase(conn, product, purchaseData) {
		if (product.auto_execute) {
			return await this.executeProductCommands(conn, product, purchaseData);
		}

		const { purchaseId, telegramId } = purchaseData;
		await this.createExecutionRecord(conn, {
			purchaseId,
			telegramId,
			productId: product.id,
			executionType: 'rank_set',
			status: 'manual_required'
		});

		return {
			message: '–ó–∞–ø–∏—Ç –Ω–∞ –ø—Ä–∏—Å–≤–æ—î–Ω–Ω—è —Ä–∞–Ω–≥—É —Å—Ç–≤–æ—Ä–µ–Ω–æ',
			requiresManualAction: true
		};
	}

	/**
	 * –û–±—Ä–æ–±–∫–∞ —Å–µ—Ä–≤—ñ—Å–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
	 */
	async processServicePurchase(conn, product, purchaseData) {
		const { purchaseId, telegramId } = purchaseData;

		// –°–µ—Ä–≤—ñ—Å–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –∑–∞–∑–≤–∏—á–∞–π –ø–æ—Ç—Ä–µ–±—É—é—Ç—å —Ä—É—á–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
		await this.createExecutionRecord(conn, {
			purchaseId,
			telegramId,
			productId: product.id,
			executionType: 'service_activate',
			status: 'manual_required'
		});

		return {
			message: '–ó–∞–ø–∏—Ç –Ω–∞ —Å–µ—Ä–≤—ñ—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –∑–≤\'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏',
			requiresManualAction: true
		};
	}

	/**
	 * –û–±—Ä–æ–±–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–∏—Ö –∫–æ–º–∞–Ω–¥
	 */
	async processCommandPurchase(conn, product, purchaseData) {
		if (product.auto_execute && !product.requires_manual_approval) {
			return await this.executeProductCommands(conn, product, purchaseData);
		}

		const { purchaseId, telegramId } = purchaseData;
		await this.createExecutionRecord(conn, {
			purchaseId,
			telegramId,
			productId: product.id,
			executionType: 'rcon_command',
			status: product.requires_manual_approval ? 'manual_required' : 'pending'
		});

		return {
			message: product.requires_manual_approval
				? '–ö–æ–º–∞–Ω–¥–∞ –±—É–¥–µ –≤–∏–∫–æ–Ω–∞–Ω–∞ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
				: '–ö–æ–º–∞–Ω–¥–∞ –¥–æ–¥–∞–Ω–∞ –≤ —á–µ—Ä–≥—É –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è',
			requiresManualAction: product.requires_manual_approval
		};
	}

	/**
	 * –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥ —Ç–æ–≤–∞—Ä—É —á–µ—Ä–µ–∑ RCON
	 */
	async executeProductCommands(conn, product, purchaseData) {
		const { telegramId, minecraftNick, quantity = 1, purchaseId } = purchaseData;
		const config = product.execution_config;

		if (!config || !config.rcon_commands) {
			throw new Error('–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∫–æ–º–∞–Ω–¥ –≤—ñ–¥—Å—É—Ç–Ω—è');
		}

		const serverId = config.server_id || 'MFS';
		const commands = Array.isArray(config.rcon_commands) ? config.rcon_commands : [config.rcon_commands];
		const results = [];

		// –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
		const executionId = await this.createExecutionRecord(conn, {
			purchaseId,
			telegramId,
			productId: product.id,
			executionType: 'rcon_command',
			status: 'pending'
		});

		try {
			for (let command of commands) {
				// –ó–∞–º—ñ–Ω—é—î–º–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∏
				const processedCommand = this.replacePlaceholders(command, {
					minecraft_nick: minecraftNick,
					quantity: quantity,
					item_id: product.item_id || 'minecraft:diamond'
				});

				console.log(`üéØ –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è —Ç–æ–≤–∞—Ä—É ${product.name}: ${processedCommand}`);

				const result = await rconService.executeCommand(serverId, processedCommand);
				results.push({
					command: processedCommand,
					success: result.success,
					response: result.response || result.error
				});

				if (!result.success) {
					throw new Error(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏: ${result.error}`);
				}

				// –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è —Å–ø–∞–º—É
				if (commands.length > 1) {
					await new Promise(resolve => setTimeout(resolve, 500));
				}
			}

			// –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
			await conn.query(
				'UPDATE product_executions SET execution_status = ?, execution_result = ?, executed_at = ? WHERE id = ?',
				['success', JSON.stringify(results), Math.floor(Date.now() / 1000), executionId]
			);

			return {
				message: '–¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–Ω–æ',
				executionResults: results
			};

		} catch (error) {
			// –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –ø–æ–º–∏–ª–∫–∏
			await conn.query(
				'UPDATE product_executions SET execution_status = ?, execution_result = ?, retry_count = retry_count + 1 WHERE id = ?',
				['failed', error.message, executionId]
			);

			throw error;
		}
	}

	/**
	 * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –ø—Ä–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
	 */
	async createExecutionRecord(conn, data) {
		const { purchaseId, telegramId, productId, executionType, status = 'pending' } = data;
		const now = Math.floor(Date.now() / 1000);

		const [result] = await conn.query(
			`INSERT INTO product_executions 
             (purchase_id, telegram_id, product_id, execution_type, execution_status, created_at) 
             VALUES (?, ?, ?, ?, ?, ?)`,
			[purchaseId, telegramId, productId, executionType, status, now]
		);

		return result.insertId;
	}

	/**
	 * –ó–∞–º—ñ–Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ñ–≤ —É –∫–æ–º–∞–Ω–¥–∞—Ö
	 */
	replacePlaceholders(command, data) {
		let result = command;

		Object.keys(data).forEach(key => {
			const placeholder = `{${key}}`;
			result = result.replace(new RegExp(placeholder, 'g'), data[key]);
		});

		return result;
	}

	/**
	 * –û–±—Ä–æ–±–∫–∞ –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∫–æ–º–∞–Ω–¥
	 */
	async processPendingExecutions() {
		if (this.processing) return;

		this.processing = true;
		console.log('üîÑ –û–±—Ä–æ–±–∫–∞ –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ —Ç–æ–≤–∞—Ä—ñ–≤...');

		try {
			const conn = await pool.getConnection();

			try {
				// –û—Ç—Ä–∏–º—É—î–º–æ –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–ø–∏—Å–∏
				const [executions] = await conn.query(`
                    SELECT pe.*, p.name as product_name, p.execution_config, u.minecraft_nick
                    FROM product_executions pe
                    JOIN products p ON pe.product_id = p.id
                    JOIN users u ON pe.telegram_id = u.telegram_id
                    WHERE pe.execution_status = 'pending' 
                    AND pe.retry_count < pe.max_retries
                    ORDER BY pe.created_at ASC
                    LIMIT 10
                `);

				for (const execution of executions) {
					await this.retryExecution(conn, execution);
				}

			} finally {
				conn.release();
			}

		} catch (error) {
			console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:', error);
		} finally {
			this.processing = false;
		}
	}

	/**
	 * –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏
	 */
	async retryExecution(conn, execution) {
		try {
			let config;
			try {
				config = typeof execution.execution_config === 'string'
					? JSON.parse(execution.execution_config)
					: execution.execution_config;
			} catch (e) {
				throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∫–æ–º–∞–Ω–¥');
			}

			const serverId = config.server_id || 'MFS';

			if (!config.rcon_commands) {
				throw new Error('–ö–æ–º–∞–Ω–¥–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ');
			}

			const commands = Array.isArray(config.rcon_commands) ? config.rcon_commands : [config.rcon_commands];
			const results = [];

			for (let command of commands) {
				const processedCommand = this.replacePlaceholders(command, {
					minecraft_nick: execution.minecraft_nick,
					quantity: 1, // –º–æ–∂–Ω–∞ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤ execution_data
					item_id: 'minecraft:diamond' // —Ç–µ–∂ –º–æ–∂–Ω–∞ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏
				});

				const result = await rconService.executeCommand(serverId, processedCommand);
				results.push({
					command: processedCommand,
					success: result.success,
					response: result.response || result.error
				});

				if (!result.success) {
					throw new Error(`–ü–æ–º–∏–ª–∫–∞ –∫–æ–º–∞–Ω–¥–∏: ${result.error}`);
				}

				// –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∫–æ–º–∞–Ω–¥–∞–º–∏
				if (commands.length > 1) {
					await new Promise(resolve => setTimeout(resolve, 500));
				}
			}

			// –£—Å–ø—ñ—à–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
			await conn.query(
				'UPDATE product_executions SET execution_status = ?, execution_result = ?, executed_at = ? WHERE id = ?',
				['success', JSON.stringify(results), Math.floor(Date.now() / 1000), execution.id]
			);

			console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è —Ç–æ–≤–∞—Ä—É ${execution.product_name}`);

		} catch (error) {
			// –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —Å–ø—Ä–æ–±
			const newRetryCount = execution.retry_count + 1;
			const status = newRetryCount >= execution.max_retries ? 'failed' : 'pending';

			await conn.query(
				'UPDATE product_executions SET retry_count = ?, execution_status = ?, execution_result = ? WHERE id = ?',
				[newRetryCount, status, error.message, execution.id]
			);

			console.log(`‚ùå –°–ø—Ä–æ–±–∞ ${newRetryCount}/${execution.max_retries} –¥–ª—è —Ç–æ–≤–∞—Ä—É ${execution.product_name}: ${error.message}`);
		}
	}

	/**
	 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –æ–±—Ä–æ–±–∫–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∏—Ö –ø—ñ–¥–ø–∏—Å–æ–∫
	 */
	async processExpiredSubscriptions() {
		console.log('üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∏—Ö –ø—ñ–¥–ø–∏—Å–æ–∫...');

		try {
			const conn = await pool.getConnection();
			const now = Math.floor(Date.now() / 1000);

			try {
				// –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∑–∞–∫—ñ–Ω—á–µ–Ω—ñ –ø—ñ–¥–ø–∏—Å–∫–∏
				const [expiredSubs] = await conn.query(`
                    SELECT s.*, p.execution_config, u.minecraft_nick
                    FROM subscriptions s
                    JOIN products p ON s.product_id = p.id
                    JOIN users u ON s.telegram_id = u.telegram_id
                    WHERE s.is_active = 1 AND s.end_date <= ?
                `, [now]);

				for (const subscription of expiredSubs) {
					await this.processExpiredSubscription(conn, subscription);
				}

			} finally {
				conn.release();
			}

		} catch (error) {
			console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–∫—ñ–Ω—á–µ–Ω–∏—Ö –ø—ñ–¥–ø–∏—Å–æ–∫:', error);
		}
	}

	/**
	 * –û–±—Ä–æ–±–∫–∞ –æ–∫—Ä–µ–º–æ—ó –∑–∞–∫—ñ–Ω—á–µ–Ω–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏
	 */
	async processExpiredSubscription(conn, subscription) {
		try {
			let config;
			try {
				config = typeof subscription.execution_config === 'string'
					? JSON.parse(subscription.execution_config)
					: subscription.execution_config;
			} catch (e) {
				console.error(`‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏ ${subscription.id}:`, e);
				config = {};
			}

			// –í–∏–∫–æ–Ω—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏
			if (config.expiry_commands && Array.isArray(config.expiry_commands)) {
				const serverId = config.server_id || 'MFS';

				for (let command of config.expiry_commands) {
					const processedCommand = this.replacePlaceholders(command, {
						minecraft_nick: subscription.minecraft_nick
					});

					const result = await rconService.executeCommand(serverId, processedCommand);

					if (!result.success) {
						console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏: ${result.error}`);
					} else {
						console.log(`‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏: ${processedCommand}`);
					}

					// –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∫–æ–º–∞–Ω–¥–∞–º–∏
					await new Promise(resolve => setTimeout(resolve, 500));
				}
			}

			// –î–µ–∞–∫—Ç–∏–≤—É—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É
			await conn.query(
				'UPDATE subscriptions SET is_active = 0, updated_at = ? WHERE id = ?',
				[Math.floor(Date.now() / 1000), subscription.id]
			);

			console.log(`‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∞ ${subscription.id} –¥–ª—è ${subscription.minecraft_nick} –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞`);

		} catch (error) {
			console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–∫—ñ–Ω—á–µ–Ω–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏ ${subscription.id}:`, error);
		}
	}

	/**
	 * –ó–∞–ø—É—Å–∫ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
	 */
	startScheduledTasks() {
		// –û–±—Ä–æ–±–∫–∞ –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ –∫–æ–∂–Ω—ñ 2 —Ö–≤–∏–ª–∏–Ω–∏
		cron.schedule('*/2 * * * *', () => {
			this.processPendingExecutions();
		});

		// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∏—Ö –ø—ñ–¥–ø–∏—Å–æ–∫ –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É
		cron.schedule('0 * * * *', () => {
			this.processExpiredSubscriptions();
		});

		console.log('‚úÖ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–≤–¥–∞–Ω—å –º–∞–≥–∞–∑–∏–Ω—É –∑–∞–ø—É—â–µ–Ω–æ');
	}
}

export default new ShopService();