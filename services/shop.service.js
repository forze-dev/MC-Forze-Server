import { pool } from '../services/db.service.js';
import rconService from '../services/rcon.service.js';
import cron from 'node-cron';

class ShopService {
	constructor() {
		this.processing = false;
		this.maxRetries = 3;
		this.retryDelay = 5000; // 5 —Å–µ–∫—É–Ω–¥
	}

	/**
	 * –ì–æ–ª–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –æ–±—Ä–æ–±–∫–∏ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä—É
	 * @param {Object} purchaseData - –î–∞–Ω—ñ –ø—Ä–æ –ø–æ–∫—É–ø–∫—É
	 * @param {string} purchaseData.telegramId - Telegram ID –ø–æ–∫—É–ø—Ü—è
	 * @param {number} purchaseData.productId - ID —Ç–æ–≤–∞—Ä—É
	 * @param {string} purchaseData.minecraftNick - Minecraft –Ω—ñ–∫–Ω–µ–π–º
	 * @param {number} purchaseData.quantity - –ö—ñ–ª—å–∫—ñ—Å—Ç—å
	 * @param {number} purchaseData.purchaseId - ID –ø–æ–∫—É–ø–∫–∏ –∑ —Ç–∞–±–ª–∏—Ü—ñ purchases
	 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–æ–±–∫–∏
	 */
	async processPurchase(purchaseData) {
		const { telegramId, productId, minecraftNick, quantity = 1, purchaseId } = purchaseData;

		if (!purchaseId) {
			throw new Error('Purchase ID —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º');
		}

		console.log(`üîÑ –û–±—Ä–æ–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è ${minecraftNick} (Purchase ID: ${purchaseId}, Product ID: ${productId})`);

		try {
			const conn = await pool.getConnection();

			try {
				await conn.beginTransaction();

				// –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≤–∞—Ä
				const [products] = await conn.query(
					'SELECT * FROM products WHERE id = ? AND is_active = 1',
					[productId]
				);

				if (products.length === 0) {
					throw new Error('–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π');
				}

				const product = products[0];

				// –ü–∞—Ä—Å–∏–º–æ execution_config —è–∫—â–æ –≤—ñ–Ω —î
				if (product.execution_config && typeof product.execution_config === 'string') {
					try {
						product.execution_config = JSON.parse(product.execution_config);
					} catch (e) {
						console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É execution_config:', e);
						product.execution_config = {};
					}
				} else if (!product.execution_config) {
					product.execution_config = {};
				}

				let result = {};

				// –û–±—Ä–æ–±–ª—è—î–º–æ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É —Ç–æ–≤–∞—Ä—É
				switch (product.product_type) {
					case 'whitelist':
						result = await this._processWhitelistPurchase(conn, product, purchaseData);
						break;

					case 'item':
						result = await this._processItemPurchase(conn, product, purchaseData);
						break;

					case 'subscription':
						// TODO: –ë—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –ø—ñ–∑–Ω—ñ—à–µ
						throw new Error('–¢–∏–ø —Ç–æ–≤–∞—Ä—É "subscription" –ø–æ–∫–∏ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è');

					case 'rank':
						result = await this._processRankPurchase(conn, product, purchaseData);
						break;

					case 'service':
						// TODO: –ë—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –ø—ñ–∑–Ω—ñ—à–µ
						throw new Error('–¢–∏–ø —Ç–æ–≤–∞—Ä—É "service" –ø–æ–∫–∏ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è');

					case 'command':
						// TODO: –ë—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –ø—ñ–∑–Ω—ñ—à–µ
						throw new Error('–¢–∏–ø —Ç–æ–≤–∞—Ä—É "command" –ø–æ–∫–∏ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è');

					default:
						throw new Error(`–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø —Ç–æ–≤–∞—Ä—É: ${product.product_type}`);
				}

				await conn.commit();
				return { success: true, productType: product.product_type, ...result };

			} catch (error) {
				await conn.rollback();
				throw error;
			} finally {
				conn.release();
			}

		} catch (error) {
			console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–∫—É–ø–∫–∏:', error);
			return {
				success: false,
				error: error.message
			};
		}
	}

	// –î–æ–¥–∞–π—Ç–µ —Ü—ñ –º–µ—Ç–æ–¥–∏ –≤ –∫–ª–∞—Å ShopService

	/**
	 * –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –º–µ—Ç–æ–¥ –æ–±—Ä–æ–±–∫–∏ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
	 * @param {Object} conn - –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
	 * @param {Object} product - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–æ–≤–∞—Ä
	 * @param {Object} purchaseData - –î–∞–Ω—ñ –ø—Ä–æ –ø–æ–∫—É–ø–∫—É
	 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–æ–±–∫–∏
	 */
	async _processItemPurchase(conn, product, purchaseData) {
		const { telegramId, minecraftNick, purchaseId, quantity = 1 } = purchaseData;

		console.log(`üì¶ –û–±—Ä–æ–±–∫–∞ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –¥–ª—è ${minecraftNick} (–∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${quantity})`);

		// –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
		const now = Math.floor(Date.now() / 1000);
		const [executionResult] = await conn.query(
			`INSERT INTO product_executions 
		 (purchase_id, telegram_id, product_id, execution_type, execution_status, created_at) 
		 VALUES (?, ?, ?, 'item_give', 'pending', ?)`,
			[purchaseId, telegramId, product.id, now]
		);

		const executionId = executionResult.insertId;

		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏
		if (product.auto_execute && !product.requires_manual_approval) {
			console.log(`üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≤–∏–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –¥–ª—è ${minecraftNick}`);

			const executionResult = await this._executeItemCommands(
				product,
				minecraftNick,
				quantity,
				conn,
				executionId
			);

			return {
				message: executionResult.message,
				executionResults: executionResult.executionResults,
				autoExecuted: true,
				hasStorageItems: executionResult.hasStorageItems
			};
		} else {
			// –ü–æ—Ç—Ä—ñ–±–Ω–∞ —Ä—É—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞
			await conn.query(
				'UPDATE product_executions SET execution_status = ? WHERE id = ?',
				['manual_required', executionId]
			);

			return {
				message: product.requires_manual_approval
					? '–ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–¥–∞—á—É –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–æ–∑–≥–ª—è–Ω–µ –π–æ–≥–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.'
					: '–ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–¥–∞—á—É –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ.',
				requiresManualAction: true,
				autoExecuted: false,
				hasStorageItems: true
			};
		}
	}

	/**
	 * –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –º–µ—Ç–æ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –≤–∏–¥–∞—á—ñ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
	 * @param {Object} product - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–æ–≤–∞—Ä
	 * @param {string} minecraftNick - Minecraft –Ω—ñ–∫–Ω–µ–π–º
	 * @param {number} quantity - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞–±–æ—Ä—ñ–≤
	 * @param {Object} conn - –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
	 * @param {number} executionId - ID –∑–∞–ø–∏—Å—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
	 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
	 */
	async _executeItemCommands(product, minecraftNick, quantity, conn, executionId) {
		try {
			const executionConfig = product.execution_config || {};
			const serverId = executionConfig.server_id || 'MFS';
			const deliveryMethod = executionConfig.delivery_method || 'storage';

			let commands = [];
			let executionResults = [];
			let hasStorageItems = false;

			// –Ø–∫—â–æ —î –≥–æ—Ç–æ–≤—ñ RCON –∫–æ–º–∞–Ω–¥–∏ –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
			if (executionConfig.rcon_commands && Array.isArray(executionConfig.rcon_commands)) {
				commands = executionConfig.rcon_commands.map(cmd =>
					this._replacePlaceholders(cmd, { minecraft_nick: minecraftNick })
				);
				hasStorageItems = deliveryMethod === 'storage';
			}
			// –Ü–Ω–∞–∫—à–µ –≥–µ–Ω–µ—Ä—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –∑ items_data
			else if (product.items_data) {
				const result = this._generateItemCommands(product, minecraftNick, quantity);
				commands = result.commands;
				hasStorageItems = result.hasStorageItems;
			}
			else {
				throw new Error('–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥ –∞–±–æ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –¥–ª—è –≤–∏–¥–∞—á—ñ');
			}

			console.log(`üéØ –í–∏–∫–æ–Ω–∞–Ω–Ω—è ${commands.length} –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤–∏–¥–∞—á—ñ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤`);

			// –í–∏–∫–æ–Ω—É—î–º–æ –∫–æ–∂–Ω—É –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ
			for (let i = 0; i < commands.length; i++) {
				const command = commands[i];

				console.log(`üîß –ö–æ–º–∞–Ω–¥–∞ ${i + 1}/${commands.length}: ${command}`);

				try {
					const result = await rconService.executeCommand(serverId, command);

					executionResults.push({
						command: command,
						success: result.success,
						response: result.response || result.error,
						order: i + 1
					});

					if (!result.success) {
						console.error(`‚ùå –ö–æ–º–∞–Ω–¥–∞ ${i + 1} –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å: ${result.error}`);
					} else {
						console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${i + 1} –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ`);
					}

					// –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∫–æ–º–∞–Ω–¥–∞–º–∏
					if (i < commands.length - 1) {
						await new Promise(resolve => setTimeout(resolve, 300));
					}

				} catch (cmdError) {
					console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ ${i + 1}:`, cmdError);

					executionResults.push({
						command: command,
						success: false,
						response: cmdError.message,
						order: i + 1
					});
				}
			}

			const now = Math.floor(Date.now() / 1000);
			const allSuccess = executionResults.every(result => result.success);
			const successCount = executionResults.filter(result => result.success).length;

			if (allSuccess) {
				// –í—Å—ñ –∫–æ–º–∞–Ω–¥–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ
				await conn.query(
					'UPDATE product_executions SET execution_status = ?, execution_result = ?, command_executed = ?, executed_at = ? WHERE id = ?',
					['success', JSON.stringify(executionResults), `${successCount}/${commands.length} –∫–æ–º–∞–Ω–¥`, now, executionId]
				);

				console.log(`‚úÖ –ü—Ä–µ–¥–º–µ—Ç–∏ –¥–ª—è ${minecraftNick} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–Ω–æ (${successCount}/${commands.length} –∫–æ–º–∞–Ω–¥)`);

				const message = hasStorageItems
					? '–ü—Ä–µ–¥–º–µ—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ —É –≤–∞—à–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ —Å—Ö–æ–≤–∏—â–µ!'
					: '–ü—Ä–µ–¥–º–µ—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–Ω–æ!';

				return {
					success: true,
					message: `${message} –í–∏–∫–æ–Ω–∞–Ω–æ ${successCount} –∫–æ–º–∞–Ω–¥.`,
					executionResults: executionResults,
					hasStorageItems: hasStorageItems
				};
			} else {
				// –î–µ—è–∫—ñ –∫–æ–º–∞–Ω–¥–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å
				const failedCount = commands.length - successCount;

				await conn.query(
					'UPDATE product_executions SET execution_status = ?, execution_result = ?, command_executed = ?, retry_count = retry_count + 1 WHERE id = ?',
					['failed', JSON.stringify(executionResults), `${successCount}/${commands.length} –∫–æ–º–∞–Ω–¥`, executionId]
				);

				throw new Error(`–í–∏–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ —á–∞—Å—Ç–∫–æ–≤–æ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å: ${failedCount} –∑ ${commands.length} –∫–æ–º–∞–Ω–¥ –Ω–µ –≤–∏–∫–æ–Ω–∞–ª–∏—Å—å`);
			}

		} catch (error) {
			console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –≤–∏–¥–∞—á—ñ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤:', error);

			// –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –ø–æ–º–∏–ª–∫–∏
			const now = Math.floor(Date.now() / 1000);
			await conn.query(
				'UPDATE product_executions SET execution_status = ?, execution_result = ?, retry_count = retry_count + 1 WHERE id = ?',
				['failed', error.message, executionId]
			);

			throw error;
		}
	}

	/**
	 * –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–º–∞–Ω–¥ –∑ items_data
	 * @param {Object} product - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–æ–≤–∞—Ä
	 * @param {string} minecraftNick - Minecraft –Ω—ñ–∫–Ω–µ–π–º
	 * @param {number} quantity - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞–±–æ—Ä—ñ–≤
	 * @returns {Object} –ö–æ–º–∞–Ω–¥–∏ —Ç–∞ –º–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏
	 */
	_generateItemCommands(product, minecraftNick, quantity) {
		try {
			let itemsData = [];

			// –ü–∞—Ä—Å–∏–º–æ items_data
			if (typeof product.items_data === 'string') {
				itemsData = JSON.parse(product.items_data);
			} else if (Array.isArray(product.items_data)) {
				itemsData = product.items_data;
			} else {
				throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç items_data');
			}

			const executionConfig = product.execution_config || {};
			const deliveryMethod = executionConfig.delivery_method || 'storage';
			const commands = [];

			// –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
			itemsData.forEach(item => {
				const itemId = item.minecraft_id;
				const amount = (item.amount || 1) * quantity;

				let command;

				if (deliveryMethod === 'storage') {
					// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–∞—à –ø–ª–∞–≥—ñ–Ω —Å—Ö–æ–≤–∏—â–∞
					if (item.nbt) {
						command = `storage add ${minecraftNick} ${itemId}${item.nbt} ${amount}`;
					} else {
						command = `storage add ${minecraftNick} ${itemId} ${amount}`;
					}
				} else {
					// –ó–≤–∏—á–∞–π–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ give
					if (item.nbt) {
						command = `give ${minecraftNick} ${itemId}${item.nbt} ${amount}`;
					} else {
						command = `give ${minecraftNick} ${itemId} ${amount}`;
					}
				}

				commands.push(command);
			});

			// –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—é
			if (deliveryMethod === 'storage') {
				commands.push(`tell ${minecraftNick} –ü—Ä–µ–¥–º–µ—Ç–∏ –¥–æ–¥–∞–Ω–æ —É –≤–∞—à–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ —Å—Ö–æ–≤–∏—â–µ! –í—ñ–¥–∫—Ä–∏–π—Ç–µ –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /storage open`);
			} else {
				commands.push(`tell ${minecraftNick} –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–∏: ${product.name}!`);
			}

			return {
				commands: commands,
				hasStorageItems: deliveryMethod === 'storage'
			};

		} catch (error) {
			console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–º–∞–Ω–¥ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤:', error);
			throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –≤–∏–¥–∞—á—ñ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤');
		}
	}

	/**
	 * –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –º–µ—Ç–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
	 * @param {Object} conn - –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
	 * @param {Object} execution - –ó–∞–ø–∏—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
	 */
	async _retryItemExecution(conn, execution) {
		try {
			// –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
			const [products] = await conn.query(
				'SELECT * FROM products WHERE id = ?',
				[execution.product_id]
			);

			if (products.length === 0) {
				throw new Error('–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
			}

			const product = products[0];

			// –ü–∞—Ä—Å–∏–º–æ execution_config
			if (product.execution_config && typeof product.execution_config === 'string') {
				try {
					product.execution_config = JSON.parse(product.execution_config);
				} catch (e) {
					console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É execution_config:', e);
					product.execution_config = {};
				}
			} else if (!product.execution_config) {
				product.execution_config = {};
			}

			console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞ –≤–∏–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –¥–ª—è ${execution.minecraft_nick}`);

			// –í–∏–∫–æ–Ω—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
			const result = await this._executeItemCommands(
				product,
				execution.minecraft_nick,
				1, // quantity = 1 –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏
				conn,
				execution.id
			);

			console.log(`‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —É—Å–ø—ñ—à–Ω–∞: –ø—Ä–µ–¥–º–µ—Ç–∏ –¥–ª—è ${execution.minecraft_nick} –≤–∏–¥–∞–Ω–æ`);

		} catch (error) {
			// –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —Å–ø—Ä–æ–±
			const newRetryCount = execution.retry_count + 1;
			const status = newRetryCount >= execution.max_retries ? 'failed' : 'pending';

			await conn.query(
				'UPDATE product_executions SET retry_count = ?, execution_status = ?, execution_result = ? WHERE id = ?',
				[newRetryCount, status, error.message, execution.id]
			);

			console.log(`‚ùå –°–ø—Ä–æ–±–∞ ${newRetryCount}/${execution.max_retries} –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ ${execution.minecraft_nick}: ${error.message}`);
		}
	}

	/**
 * –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –º–µ—Ç–æ–¥ –æ–±—Ä–æ–±–∫–∏ –ø–æ–∫—É–ø–∫–∏ —Ä–∞–Ω–∫—É
 * @param {Object} conn - –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
 * @param {Object} product - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–æ–≤–∞—Ä
 * @param {Object} purchaseData - –î–∞–Ω—ñ –ø—Ä–æ –ø–æ–∫—É–ø–∫—É
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–æ–±–∫–∏
 */
	async _processRankPurchase(conn, product, purchaseData) {
		const { telegramId, minecraftNick, purchaseId } = purchaseData;

		console.log(`üéñÔ∏è –û–±—Ä–æ–±–∫–∞ —Ä–∞–Ω–∫—É –¥–ª—è ${minecraftNick}`);

		// –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
		const now = Math.floor(Date.now() / 1000);
		const [executionResult] = await conn.query(
			`INSERT INTO product_executions 
		 (purchase_id, telegram_id, product_id, execution_type, execution_status, created_at) 
		 VALUES (?, ?, ?, 'rank_set', 'pending', ?)`,
			[purchaseId, telegramId, product.id, now]
		);

		const executionId = executionResult.insertId;

		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏
		if (product.auto_execute && !product.requires_manual_approval) {
			console.log(`üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–∞–Ω–∫—É –¥–ª—è ${minecraftNick}`);

			const executionResult = await this._executeRankCommands(
				product.execution_config,
				minecraftNick,
				conn,
				executionId
			);

			return {
				message: '–¢–≤—ñ–π —Ä–∞–Ω–≥ —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!',
				executionResults: executionResult.executionResults,
				autoExecuted: true
			};
		} else {
			// –ü–æ—Ç—Ä—ñ–±–Ω–∞ —Ä—É—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞
			await conn.query(
				'UPDATE product_executions SET execution_status = ? WHERE id = ?',
				['manual_required', executionId]
			);

			return {
				message: product.requires_manual_approval
					? '–ó–∞–ø–∏—Ç –Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–∞–Ω–∫—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–æ–∑–≥–ª—è–Ω–µ –π–æ–≥–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.'
					: '–ó–∞–ø–∏—Ç –Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–∞–Ω–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–æ.',
				requiresManualAction: true,
				autoExecuted: false
			};
		}
	}

	/**
	 * –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –º–µ—Ç–æ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–∞–Ω–∫—É
	 * @param {Object} executionConfig - –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
	 * @param {string} minecraftNick - Minecraft –Ω—ñ–∫–Ω–µ–π–º
	 * @param {Object} conn - –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
	 * @param {number} executionId - ID –∑–∞–ø–∏—Å—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
	 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
	 */
	async _executeRankCommands(executionConfig, minecraftNick, conn, executionId) {
		try {
			const serverId = executionConfig.server_id || 'MFS';
			const executionResults = [];

			// –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
			let commands = [];

			if (executionConfig.commands && Array.isArray(executionConfig.commands)) {
				commands = executionConfig.commands;
			} else if (executionConfig.rcon_commands && Array.isArray(executionConfig.rcon_commands)) {
				commands = executionConfig.rcon_commands;
			} else {
				throw new Error('–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Ä–∞–Ω–∫—É');
			}

			console.log(`üéØ –í–∏–∫–æ–Ω–∞–Ω–Ω—è ${commands.length} –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–∞–Ω–∫—É`);

			// –í–∏–∫–æ–Ω—É—î–º–æ –∫–æ–∂–Ω—É –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ
			for (let i = 0; i < commands.length; i++) {
				const rawCommand = commands[i];
				const command = this._replacePlaceholders(rawCommand, {
					minecraft_nick: minecraftNick
				});

				console.log(`üîß –ö–æ–º–∞–Ω–¥–∞ ${i + 1}/${commands.length}: ${command}`);

				try {
					const result = await rconService.executeCommand(serverId, command);

					executionResults.push({
						command: command,
						success: result.success,
						response: result.response || result.error,
						order: i + 1
					});

					if (!result.success) {
						console.error(`‚ùå –ö–æ–º–∞–Ω–¥–∞ ${i + 1} –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å: ${result.error}`);
						// –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —ñ–Ω—à–∏—Ö –∫–æ–º–∞–Ω–¥, –∞–ª–µ –∑–∞–ø–∏—Å—É—î–º–æ –ø–æ–º–∏–ª–∫—É
					} else {
						console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${i + 1} –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ`);
					}

					// –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∫–æ–º–∞–Ω–¥–∞–º–∏
					if (i < commands.length - 1) {
						await new Promise(resolve => setTimeout(resolve, 500));
					}

				} catch (cmdError) {
					console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ ${i + 1}:`, cmdError);

					executionResults.push({
						command: command,
						success: false,
						response: cmdError.message,
						order: i + 1
					});
				}
			}

			const now = Math.floor(Date.now() / 1000);
			const allSuccess = executionResults.every(result => result.success);
			const successCount = executionResults.filter(result => result.success).length;

			if (allSuccess) {
				// –í—Å—ñ –∫–æ–º–∞–Ω–¥–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ
				await conn.query(
					'UPDATE product_executions SET execution_status = ?, execution_result = ?, command_executed = ?, executed_at = ? WHERE id = ?',
					['success', JSON.stringify(executionResults), `${successCount}/${commands.length} –∫–æ–º–∞–Ω–¥`, now, executionId]
				);

				console.log(`‚úÖ –†–∞–Ω–≥ –¥–ª—è ${minecraftNick} —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (${successCount}/${commands.length} –∫–æ–º–∞–Ω–¥)`);

				return {
					success: true,
					message: `–¢–≤—ñ–π —Ä–∞–Ω–≥ —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –í–∏–∫–æ–Ω–∞–Ω–æ ${successCount} –∫–æ–º–∞–Ω–¥.`,
					executionResults: executionResults
				};
			} else {
				// –î–µ—è–∫—ñ –∫–æ–º–∞–Ω–¥–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å
				const failedCount = commands.length - successCount;

				await conn.query(
					'UPDATE product_executions SET execution_status = ?, execution_result = ?, command_executed = ?, retry_count = retry_count + 1 WHERE id = ?',
					['failed', JSON.stringify(executionResults), `${successCount}/${commands.length} –∫–æ–º–∞–Ω–¥`, executionId]
				);

				throw new Error(`–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–∞–Ω–∫—É —á–∞—Å—Ç–∫–æ–≤–æ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å: ${failedCount} –∑ ${commands.length} –∫–æ–º–∞–Ω–¥ –Ω–µ –≤–∏–∫–æ–Ω–∞–ª–∏—Å—å`);
			}

		} catch (error) {
			console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥ —Ä–∞–Ω–∫—É:', error);

			// –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –ø–æ–º–∏–ª–∫–∏
			const now = Math.floor(Date.now() / 1000);
			await conn.query(
				'UPDATE product_executions SET execution_status = ?, execution_result = ?, retry_count = retry_count + 1 WHERE id = ?',
				['failed', error.message, executionId]
			);

			throw error;
		}
	}


	/**
	 * –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –º–µ—Ç–æ–¥ –æ–±—Ä–æ–±–∫–∏ –ø–æ–∫—É–ø–∫–∏ –≤–∞–π—Ç–ª—ñ—Å—Ç–∞
	 * @param {Object} conn - –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
	 * @param {Object} product - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–æ–≤–∞—Ä
	 * @param {Object} purchaseData - –î–∞–Ω—ñ –ø—Ä–æ –ø–æ–∫—É–ø–∫—É
	 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–æ–±–∫–∏
	 */
	async _processWhitelistPurchase(conn, product, purchaseData) {
		const { telegramId, minecraftNick, purchaseId } = purchaseData;

		console.log(`üéØ –û–±—Ä–æ–±–∫–∞ –≤–∞–π—Ç–ª—ñ—Å—Ç–∞ –¥–ª—è ${minecraftNick}`);

		// –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
		const now = Math.floor(Date.now() / 1000);
		const [executionResult] = await conn.query(
			`INSERT INTO product_executions 
			 (purchase_id, telegram_id, product_id, execution_type, execution_status, created_at) 
			 VALUES (?, ?, ?, 'whitelist_add', 'pending', ?)`,
			[purchaseId, telegramId, product.id, now]
		);

		const executionId = executionResult.insertId;

		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏
		if (product.auto_execute && !product.requires_manual_approval) {
			console.log(`üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è ${minecraftNick} –¥–æ –≤–∞–π—Ç–ª—ñ—Å—Ç–∞`);

			const executionResult = await this._executeWhitelistCommand(
				product.execution_config,
				minecraftNick,
				conn,
				executionId
			);

			return {
				message: '–¢–µ–±–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞–π—Ç–ª—ñ—Å—Ç–∞!',
				executionResults: executionResult.executionResults,
				autoExecuted: true
			};
		} else {
			// –ü–æ—Ç—Ä—ñ–±–Ω–∞ —Ä—É—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞
			await conn.query(
				'UPDATE product_executions SET execution_status = ? WHERE id = ?',
				['manual_required', executionId]
			);

			return {
				message: product.requires_manual_approval
					? '–ó–∞–ø–∏—Ç –Ω–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ –≤–∞–π—Ç–ª—ñ—Å—Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–æ–∑–≥–ª—è–Ω–µ –π–æ–≥–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.'
					: '–ó–∞–ø–∏—Ç –Ω–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ –≤–∞–π—Ç–ª—ñ—Å—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ.',
				requiresManualAction: true,
				autoExecuted: false
			};
		}
	}

	/**
	 * –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –º–µ—Ç–æ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ –≤–∞–π—Ç–ª—ñ—Å—Ç–∞
	 * @param {Object} executionConfig - –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
	 * @param {string} minecraftNick - Minecraft –Ω—ñ–∫–Ω–µ–π–º
	 * @param {Object} conn - –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
	 * @param {number} executionId - ID –∑–∞–ø–∏—Å—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
	 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
	 */
	async _executeWhitelistCommand(executionConfig, minecraftNick, conn, executionId) {
		try {
			const serverId = executionConfig.server_id || 'MFS';

			// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ –≤–∞–π—Ç–ª—ñ—Å—Ç–∞ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ Minecraft)
			let command = `whitelist add ${minecraftNick}`;

			// –Ø–∫—â–æ –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —î –∫–∞—Å—Ç–æ–º–Ω–∞ –∫–æ–º–∞–Ω–¥–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ó—ó
			if (executionConfig.rcon_commands && Array.isArray(executionConfig.rcon_commands)) {
				command = this._replacePlaceholders(executionConfig.rcon_commands[0], {
					minecraft_nick: minecraftNick
				});
			} else if (executionConfig.whitelist_command) {
				command = this._replacePlaceholders(executionConfig.whitelist_command, {
					minecraft_nick: minecraftNick
				});
			}

			console.log(`üéØ –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ –≤–∞–π—Ç–ª—ñ—Å—Ç–∞: ${command}`);

			// –í–∏–∫–æ–Ω—É—î–º–æ –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ RCON
			const result = await rconService.executeCommand(serverId, command);

			const executionResults = [{
				command: command,
				success: result.success,
				response: result.response || result.error
			}];

			const now = Math.floor(Date.now() / 1000);

			if (result.success) {
				// –£—Å–ø—ñ—à–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
				await conn.query(
					'UPDATE product_executions SET execution_status = ?, execution_result = ?, command_executed = ?, executed_at = ? WHERE id = ?',
					['success', JSON.stringify(executionResults), command, now, executionId]
				);

				console.log(`‚úÖ –ì—Ä–∞–≤—Ü—è ${minecraftNick} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞–π—Ç–ª—ñ—Å—Ç–∞`);

				return {
					success: true,
					message: '–¢–µ–±–µ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞–π—Ç–ª—ñ—Å—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞!',
					executionResults: executionResults
				};
			} else {
				// –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
				await conn.query(
					'UPDATE product_executions SET execution_status = ?, execution_result = ?, command_executed = ?, retry_count = retry_count + 1 WHERE id = ?',
					['failed', result.error, command, executionId]
				);

				throw new Error(`–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ –≤–∞–π—Ç–ª—ñ—Å—Ç–∞: ${result.error}`);
			}

		} catch (error) {
			console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –≤–∞–π—Ç–ª—ñ—Å—Ç–∞:', error);

			// –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –ø–æ–º–∏–ª–∫–∏
			const now = Math.floor(Date.now() / 1000);
			await conn.query(
				'UPDATE product_executions SET execution_status = ?, execution_result = ?, retry_count = retry_count + 1 WHERE id = ?',
				['failed', error.message, executionId]
			);

			throw error;
		}
	}

	/**
	 * –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –º–µ—Ç–æ–¥ –∑–∞–º—ñ–Ω–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ñ–≤ —É –∫–æ–º–∞–Ω–¥–∞—Ö
	 * @param {string} command - –ö–æ–º–∞–Ω–¥–∞ –∑ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏
	 * @param {Object} data - –î–∞–Ω—ñ –¥–ª—è –∑–∞–º—ñ–Ω–∏
	 * @returns {string} –û–±—Ä–æ–±–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
	 */
	_replacePlaceholders(command, data) {
		let result = command;

		Object.keys(data).forEach(key => {
			const placeholder = `{${key}}`;
			result = result.replace(new RegExp(placeholder, 'g'), data[key]);
		});

		return result;
	}

	/**
	 * –û–±—Ä–æ–±–∫–∞ –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∫–æ–º–∞–Ω–¥
	 * –ó–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –∑–∞ —Ä–æ–∑–∫–ª–∞–¥–æ–º –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏ –Ω–µ–≤–¥–∞–ª–∏—Ö –≤–∏–∫–æ–Ω–∞–Ω—å
	 */
	async processPendingExecutions() {
		if (this.processing) return;

		this.processing = true;
		console.log('üîÑ –û–±—Ä–æ–±–∫–∞ –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∫–æ–º–∞–Ω–¥...');

		try {
			const conn = await pool.getConnection();

			try {
				// –û—Ç—Ä–∏–º—É—î–º–æ –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–ø–∏—Å–∏
				const [executions] = await conn.query(`
					SELECT pe.*, p.name as product_name, p.product_type, p.execution_config, u.minecraft_nick
					FROM product_executions pe
					JOIN products p ON pe.product_id = p.id
					JOIN users u ON pe.telegram_id = u.telegram_id
					WHERE pe.execution_status = 'pending' 
					AND pe.retry_count < pe.max_retries
					ORDER BY pe.created_at ASC
					LIMIT 10
				`);

				for (const execution of executions) {
					await this._retryExecution(conn, execution);
				}

			} finally {
				conn.release();
			}

		} catch (error) {
			console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:', error);
		} finally {
			this.processing = false;
		}
	}

	/**
	 * –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –º–µ—Ç–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏
	 * @param {Object} conn - –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
	 * @param {Object} execution - –ó–∞–ø–∏—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
	 */
	async _retryExecution(conn, execution) {
		try {
			console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è ${execution.execution_type} –¥–ª—è ${execution.minecraft_nick}`);

			// –û–±—Ä–æ–±–ª—è—î–º–æ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
			switch (execution.execution_type) {
				case 'whitelist_add':
					await this._retryWhitelistExecution(conn, execution);
					break;

				case 'rank_set':
					await this._retryRankExecution(conn, execution);
					break;

				case 'item_give':
					await this._retryItemExecution(conn, execution);
					break;

				// –¢—É—Ç –±—É–¥—É—Ç—å —ñ–Ω—à—ñ —Ç–∏–ø–∏ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É
				default:
					console.log(`‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: ${execution.execution_type}`);
			}

		} catch (error) {
			console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏ –¥–ª—è ${execution.minecraft_nick}:`, error);
		}
	}

	/**
 * –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –º–µ—Ç–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥ —Ä–∞–Ω–∫—É
 * @param {Object} conn - –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
 * @param {Object} execution - –ó–∞–ø–∏—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
 */
	async _retryRankExecution(conn, execution) {
		try {
			let executionConfig = {};
			try {
				executionConfig = typeof execution.execution_config === 'string'
					? JSON.parse(execution.execution_config)
					: execution.execution_config || {};
			} catch (e) {
				throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∫–æ–º–∞–Ω–¥ —Ä–∞–Ω–∫—É');
			}

			const serverId = executionConfig.server_id || 'MFS';
			const executionResults = [];

			// –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏
			let commands = [];
			if (executionConfig.commands && Array.isArray(executionConfig.commands)) {
				commands = executionConfig.commands;
			} else if (executionConfig.rcon_commands && Array.isArray(executionConfig.rcon_commands)) {
				commands = executionConfig.rcon_commands;
			} else {
				throw new Error('–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è');
			}

			console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è ${commands.length} –∫–æ–º–∞–Ω–¥ —Ä–∞–Ω–∫—É –¥–ª—è ${execution.minecraft_nick}`);

			// –í–∏–∫–æ–Ω—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏
			for (let i = 0; i < commands.length; i++) {
				const rawCommand = commands[i];
				const command = this._replacePlaceholders(rawCommand, {
					minecraft_nick: execution.minecraft_nick
				});

				try {
					const result = await rconService.executeCommand(serverId, command);

					executionResults.push({
						command: command,
						success: result.success,
						response: result.response || result.error,
						order: i + 1
					});

					if (i < commands.length - 1) {
						await new Promise(resolve => setTimeout(resolve, 500));
					}

				} catch (cmdError) {
					executionResults.push({
						command: command,
						success: false,
						response: cmdError.message,
						order: i + 1
					});
				}
			}

			const now = Math.floor(Date.now() / 1000);
			const allSuccess = executionResults.every(result => result.success);
			const successCount = executionResults.filter(result => result.success).length;

			if (allSuccess) {
				// –£—Å–ø—ñ—à–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
				await conn.query(
					'UPDATE product_executions SET execution_status = ?, execution_result = ?, command_executed = ?, executed_at = ? WHERE id = ?',
					['success', JSON.stringify(executionResults), `${successCount}/${commands.length} –∫–æ–º–∞–Ω–¥`, now, execution.id]
				);

				console.log(`‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —É—Å–ø—ñ—à–Ω–∞: —Ä–∞–Ω–≥ –¥–ª—è ${execution.minecraft_nick} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
			} else {
				throw new Error(`–ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —á–∞—Å—Ç–∫–æ–≤–æ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å: ${commands.length - successCount} –∫–æ–º–∞–Ω–¥ –Ω–µ –≤–∏–∫–æ–Ω–∞–ª–∏—Å—å`);
			}

		} catch (error) {
			// –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —Å–ø—Ä–æ–±
			const newRetryCount = execution.retry_count + 1;
			const status = newRetryCount >= execution.max_retries ? 'failed' : 'pending';

			await conn.query(
				'UPDATE product_executions SET retry_count = ?, execution_status = ?, execution_result = ? WHERE id = ?',
				[newRetryCount, status, error.message, execution.id]
			);

			console.log(`‚ùå –°–ø—Ä–æ–±–∞ ${newRetryCount}/${execution.max_retries} –¥–ª—è —Ä–∞–Ω–∫—É ${execution.minecraft_nick}: ${error.message}`);
		}
	}

	/**
	 * –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –º–µ—Ç–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –≤–∞–π—Ç–ª—ñ—Å—Ç–∞
	 * @param {Object} conn - –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
	 * @param {Object} execution - –ó–∞–ø–∏—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
	 */
	async _retryWhitelistExecution(conn, execution) {
		try {
			let executionConfig = {};
			try {
				executionConfig = typeof execution.execution_config === 'string'
					? JSON.parse(execution.execution_config)
					: execution.execution_config || {};
			} catch (e) {
				throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∫–æ–º–∞–Ω–¥');
			}

			const serverId = executionConfig.server_id || 'MFS';

			let command = `whitelist add ${execution.minecraft_nick}`;

			// –Ø–∫—â–æ –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —î –∫–∞—Å—Ç–æ–º–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
			if (executionConfig.rcon_commands && Array.isArray(executionConfig.rcon_commands)) {
				command = this._replacePlaceholders(executionConfig.rcon_commands[0], {
					minecraft_nick: execution.minecraft_nick
				});
			} else if (executionConfig.whitelist_command) {
				command = this._replacePlaceholders(executionConfig.whitelist_command, {
					minecraft_nick: execution.minecraft_nick
				});
			}

			console.log(`üéØ –ü–æ–≤—Ç–æ—Ä–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –≤–∞–π—Ç–ª—ñ—Å—Ç–∞: ${command}`);

			const result = await rconService.executeCommand(serverId, command);
			const executionResults = [{
				command: command,
				success: result.success,
				response: result.response || result.error
			}];

			const now = Math.floor(Date.now() / 1000);

			if (result.success) {
				// –£—Å–ø—ñ—à–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
				await conn.query(
					'UPDATE product_executions SET execution_status = ?, execution_result = ?, command_executed = ?, executed_at = ? WHERE id = ?',
					['success', JSON.stringify(executionResults), command, now, execution.id]
				);

				console.log(`‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —É—Å–ø—ñ—à–Ω–∞: –≥—Ä–∞–≤—Ü—è ${execution.minecraft_nick} –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞–π—Ç–ª—ñ—Å—Ç–∞`);
			} else {
				throw new Error(`–ü–æ–º–∏–ª–∫–∞ –∫–æ–º–∞–Ω–¥–∏: ${result.error}`);
			}

		} catch (error) {
			// –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —Å–ø—Ä–æ–±
			const newRetryCount = execution.retry_count + 1;
			const status = newRetryCount >= execution.max_retries ? 'failed' : 'pending';

			await conn.query(
				'UPDATE product_executions SET retry_count = ?, execution_status = ?, execution_result = ? WHERE id = ?',
				[newRetryCount, status, error.message, execution.id]
			);

			console.log(`‚ùå –°–ø—Ä–æ–±–∞ ${newRetryCount}/${execution.max_retries} –¥–ª—è –≤–∞–π—Ç–ª—ñ—Å—Ç–∞ ${execution.minecraft_nick}: ${error.message}`);
		}
	}

	/**
	 * –ó–∞–ø—É—Å–∫ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
	 */
	startScheduledTasks() {
		// –û–±—Ä–æ–±–∫–∞ –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ –∫–æ–∂–Ω—ñ 2 —Ö–≤–∏–ª–∏–Ω–∏
		cron.schedule('*/2 * * * *', () => {
			this.processPendingExecutions();
		});

		console.log('‚úÖ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–≤–¥–∞–Ω—å –º–∞–≥–∞–∑–∏–Ω—É –∑–∞–ø—É—â–µ–Ω–æ');
	}

	/**
	 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω—å
	 * @param {string} executionType - –¢–∏–ø –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
	 * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	 */
	async getExecutionStats(executionType = null) {
		try {
			const conn = await pool.getConnection();

			try {
				let query = `
					SELECT 
						execution_type,
						execution_status,
						COUNT(*) as count
					FROM product_executions 
				`;

				const params = [];

				if (executionType) {
					query += ' WHERE execution_type = ?';
					params.push(executionType);
				}

				query += ' GROUP BY execution_type, execution_status';

				const [stats] = await conn.query(query, params);

				// –ì—Ä—É–ø—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–∏–ø–æ–º –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
				const result = {};
				stats.forEach(stat => {
					if (!result[stat.execution_type]) {
						result[stat.execution_type] = {};
					}
					result[stat.execution_type][stat.execution_status] = stat.count;
				});

				return result;

			} finally {
				conn.release();
			}

		} catch (error) {
			console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
			return {};
		}
	}
}

export default new ShopService();