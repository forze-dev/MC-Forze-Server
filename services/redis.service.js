import { createClient } from 'redis';
import 'dotenv/config';

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Redis
const redisUrl = process.env.REDIS_URL || 'redis://localhost:6379';
const redisClient = createClient({
	url: redisUrl,
	socket: {
		reconnectStrategy: (retries) => {
			// –ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–∞–ª—å–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–æ–±–∞—Ö
			const delay = Math.min(retries * 50, 2000);
			return delay;
		}
	}
});

redisClient.on('error', (err) => {
	console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ Redis:', err);
});

redisClient.on('reconnecting', () => {
	console.log('üì® –ü–æ–≤—Ç–æ—Ä–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Redis...');
});

redisClient.on('connect', () => {
	console.log('‚úÖ –£—Å–ø—ñ—à–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Redis');
});

// –ö–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
const CACHE_KEYS = {
	USER_PROCESSED_MESSAGES: 'processed_messages',      // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
	USER_PROCESSED_BALANCES: 'processed_balances',      // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –±–∞–ª–∞–Ω—Å—ñ–≤
	REGISTERED_USERS: 'registered_users',               // Set –¥–ª—è –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
	USER_DAILY_MESSAGES: 'daily_messages',              // Hash –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
	USER_LAST_MESSAGE: 'last_message',                  // Hash –¥–ª—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
	USER_BALANCE: 'user_balance',                       // Hash –¥–ª—è –±–∞–ª–∞–Ω—Å—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
	PENDING_UPDATES: 'pending_updates',                 // Set –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏
	CURRENT_PERIOD_KEY: 'current_message_period',       // –ö–ª—é—á –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É
	PERIOD_START_TIME: 'period_start_time',             // –ß–∞—Å –ø–æ—á–∞—Ç–∫—É –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É (timestamp)
	PERIOD_END_TIME: 'period_end_time',                 // –ß–∞—Å –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É (timestamp)
};

// –ö—É–ª–¥–∞—É–Ω –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ (–º—Å)
const MESSAGE_COOLDOWN = 5000; // 5 —Å–µ–∫—É–Ω–¥

// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞ –ø–µ—Ä—ñ–æ–¥
const MAX_MESSAGES_PER_PERIOD = 200;

/**
 * –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Redis –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏
 */
const connectRedis = async (maxRetries = 5) => {
	let retries = 0;

	const tryConnect = async () => {
		try {
			await redisClient.connect();
			// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–µ—Ä—ñ–æ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
			await initializeMessagePeriod();
			return true;
		} catch (error) {
			if (retries < maxRetries) {
				retries++;
				const delayMs = Math.pow(2, retries) * 1000; // –ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–∞–ª—å–Ω–∏–π –≤—ñ–¥—Å—Ç—É–ø
				console.log(`‚è±Ô∏è –°–ø—Ä–æ–±–∞ ${retries}/${maxRetries} –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Redis —á–µ—Ä–µ–∑ ${delayMs}ms`);
				await new Promise(resolve => setTimeout(resolve, delayMs));
				return tryConnect();
			} else {
				console.error('‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Redis –≤–∏—á–µ—Ä–ø–∞–Ω–∞:', error);
				return false;
			}
		}
	};

	return tryConnect();
};

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –ø–æ—Ç–æ—á–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
 * –ü–µ—Ä—ñ–æ–¥: –∑ 13:00 –¥–æ 13:00 –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –¥–Ω—è –∑–∞ –ö–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º
 */
const initializeMessagePeriod = async () => {
	try {
		// –û—Ç—Ä–∏–º—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–∏–π –ø–µ—Ä—ñ–æ–¥
		const periodStart = await redisClient.get(CACHE_KEYS.PERIOD_START_TIME);
		const periodEnd = await redisClient.get(CACHE_KEYS.PERIOD_END_TIME);

		const now = Date.now();

		// –Ø–∫—â–æ –ø–µ—Ä—ñ–æ–¥ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π –∞–±–æ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è
		if (!periodStart || !periodEnd || parseInt(periodEnd) < now) {
			return await setupNewMessagePeriod();
		} else {
			console.log(`‚úÖ –ü–æ—Ç–æ—á–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: ${new Date(parseInt(periodStart)).toLocaleString('uk-UA')} - ${new Date(parseInt(periodEnd)).toLocaleString('uk-UA')}`);
			return {
				start: parseInt(periodStart),
				end: parseInt(periodEnd)
			};
		}
	} catch (error) {
		console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø–µ—Ä—ñ–æ–¥—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:', error);
		return null;
	}
};

/**
 * –ù–∞–ª–∞—à—Ç–æ–≤—É—î –Ω–æ–≤–∏–π –ø–µ—Ä—ñ–æ–¥ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
 * –ü–µ—Ä—ñ–æ–¥: –∑ 13:00 –¥–æ 13:00 –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –¥–Ω—è –∑–∞ –ö–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º
 */
const setupNewMessagePeriod = async () => {
	try {
		// –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —É –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
		const now = new Date();

		// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –¥–∞—Ç—É –Ω–∞ 13:00 –ø–æ—Ç–æ—á–Ω–æ–≥–æ –¥–Ω—è (–∑–∞ –ö–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º, UTC+2/UTC+3)
		const kyivNow = new Date(now.toLocaleString('en-US', { timeZone: 'Europe/Kiev' }));
		const periodStartTime = new Date(kyivNow);
		periodStartTime.setHours(13, 0, 0, 0);

		// –Ø–∫—â–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å –ø—ñ–∑–Ω—ñ—à–µ 13:00, –ø–æ—á–∞—Ç–æ–∫ –ø–µ—Ä—ñ–æ–¥—É - —Å—å–æ–≥–æ–¥–Ω—ñ –æ 13:00
		// –Ø–∫—â–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —Ä–∞–Ω—ñ—à–µ 13:00, –ø–æ—á–∞—Ç–æ–∫ –ø–µ—Ä—ñ–æ–¥—É - –≤—á–æ—Ä–∞ –æ 13:00
		if (kyivNow.getHours() < 13) {
			periodStartTime.setDate(periodStartTime.getDate() - 1);
		}

		// –ö—ñ–Ω–µ—Ü—å –ø–µ—Ä—ñ–æ–¥—É - —á–µ—Ä–µ–∑ 24 –≥–æ–¥–∏–Ω–∏ –ø—ñ—Å–ª—è –ø–æ—á–∞—Ç–∫—É
		const periodEndTime = new Date(periodStartTime);
		periodEndTime.setDate(periodStartTime.getDate() + 1);

		// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —á–∞—Å–æ–≤—ñ –º—ñ—Ç–∫–∏ –≤ Redis
		const startTimestamp = periodStartTime.getTime();
		const endTimestamp = periodEndTime.getTime();

		await redisClient.set(CACHE_KEYS.PERIOD_START_TIME, startTimestamp.toString());
		await redisClient.set(CACHE_KEYS.PERIOD_END_TIME, endTimestamp.toString());

		// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É
		const periodKey = `period:${startTimestamp}`;
		await redisClient.set(CACHE_KEYS.CURRENT_PERIOD_KEY, periodKey);

		console.log(`‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–∏–π –ø–µ—Ä—ñ–æ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: ${periodStartTime.toLocaleString('uk-UA')} - ${periodEndTime.toLocaleString('uk-UA')}`);

		return {
			start: startTimestamp,
			end: endTimestamp,
			key: periodKey
		};
	} catch (error) {
		console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:', error);
		return null;
	}
};

/**
 * –°–∫–∏–¥–∞—î –ø–æ—Ç–æ—á–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ —ñ —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π
 * –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –Ω–∞–≥–æ—Ä–æ–¥
 */
const resetMessagePeriod = async () => {
	try {
		// –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –∫–ª—é—á –ø–µ—Ä—ñ–æ–¥—É (–¥–ª—è –º–æ–∂–ª–∏–≤–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö)
		const currentPeriodKey = await redisClient.get(CACHE_KEYS.CURRENT_PERIOD_KEY);

		// –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –∫–ª—é—á—ñ, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ –ø–æ—Ç–æ—á–Ω–∏–º –ø–µ—Ä—ñ–æ–¥–æ–º
		if (currentPeriodKey) {
			// –û—á–∏—â–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ, —è–∫—â–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —ó—Ö —É —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ)
			// await redisClient.del(`${currentPeriodKey}:messages`);
		}

		// –°–∫–∏–¥–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –ø–µ—Ä—ñ–æ–¥
		await redisClient.del(CACHE_KEYS.PERIOD_START_TIME);
		await redisClient.del(CACHE_KEYS.PERIOD_END_TIME);
		await redisClient.del(CACHE_KEYS.CURRENT_PERIOD_KEY);

		// –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
		await redisClient.del(CACHE_KEYS.USER_DAILY_MESSAGES);
		await redisClient.del(CACHE_KEYS.USER_PROCESSED_MESSAGES);
		await redisClient.del(CACHE_KEYS.USER_PROCESSED_BALANCES); // –î–æ–¥–∞—î–º–æ —Å–∫–∏–¥–∞–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –±–∞–ª–∞–Ω—Å—ñ–≤
		await redisClient.del(CACHE_KEYS.USER_BALANCE);
		await redisClient.del(CACHE_KEYS.PENDING_UPDATES);

		// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–∏–π –ø–µ—Ä—ñ–æ–¥
		return await setupNewMessagePeriod();
	} catch (error) {
		console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:', error);
		return null;
	}
};

/**
 * –û—Ç—Ä–∏–º—É—î –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –ø–µ—Ä—ñ–æ–¥
 * @param {string} telegramId ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram
 * @returns {Promise<number>} –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
 */
const getUserMessageCount = async (telegramId) => {
	try {
		const count = await redisClient.hGet(CACHE_KEYS.USER_DAILY_MESSAGES, telegramId);
		return count ? parseInt(count) : 0;
	} catch (error) {
		console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è ${telegramId}:`, error);
		return 0;
	}
};

/**
 * –û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @param {string} telegramId ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram
 * @returns {Promise<number>} –ë–∞–ª–∞–Ω—Å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
 */
const getUserBalance = async (telegramId) => {
	try {
		const balance = await redisClient.hGet(CACHE_KEYS.USER_BALANCE, telegramId);
		return balance ? parseInt(balance) : 0;
	} catch (error) {
		console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è ${telegramId}:`, error);
		return 0;
	}
};

/**
 * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –∫–µ—à
 * @param {object} pool MySQL connection pool 
 */
const loadRegisteredUsers = async (pool) => {
	try {
		const [users] = await pool.query('SELECT telegram_id FROM users');

		if (users.length > 0) {
			// –î–æ–¥–∞—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–æ –º–Ω–æ–∂–∏–Ω–∏
			const telegramIds = users.map(user => user.telegram_id.toString());

			// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ pipeline –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
			const pipeline = redisClient.multi();

			// –°–ø–æ—á–∞—Ç–∫—É –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å–ø–∏—Å–æ–∫, —è–∫—â–æ –≤—ñ–Ω —î
			pipeline.del(CACHE_KEYS.REGISTERED_USERS);

			// –î–æ–¥–∞—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–æ –º–Ω–æ–∂–∏–Ω–∏
			if (telegramIds.length > 0) {
				pipeline.sAdd(CACHE_KEYS.REGISTERED_USERS, telegramIds);
			}

			// –í–∏–∫–æ–Ω—É—î–º–æ –≤—Å—ñ –∫–æ–º–∞–Ω–¥–∏ —Ä–∞–∑–æ–º
			await pipeline.exec();

			console.log(`‚úÖ –ö–µ—à –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ: ${telegramIds.length} –∑–∞–ø–∏—Å—ñ–≤`);
		}
	} catch (error) {
		console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
	}
};

/**
 * –î–æ–¥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –∫–µ—à—É –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö
 * @param {string} telegramId ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
const addRegisteredUser = async (telegramId) => {
	try {
		await redisClient.sAdd(CACHE_KEYS.REGISTERED_USERS, telegramId.toString());
	} catch (error) {
		console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${telegramId} –¥–æ –∫–µ—à—É:`, error);
	}
};

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á (–±–µ–∑ –∑–∞–ø–∏—Ç—É –¥–æ MySQL)
 * @param {string} telegramId ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @returns {Promise<boolean>} true, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
 */
const isUserRegistered = async (telegramId) => {
	try {
		return await redisClient.sIsMember(CACHE_KEYS.REGISTERED_USERS, telegramId.toString());
	} catch (error) {
		console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${telegramId}:`, error);
		return false;
	}
};

/**
 * –Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç—É—î –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @param {string} telegramId ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram
 * @returns {Promise<number|string>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
 */
const incrementUserMessages = async (telegramId) => {
	try {
		const now = Date.now();

		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∞–∫—Ç–∏–≤–Ω–∏–π –ø–æ—Ç–æ—á–Ω–∏–π –ø–µ—Ä—ñ–æ–¥
		await initializeMessagePeriod();

		// –û—Ç—Ä–∏–º—É—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
		const lastMessage = await redisClient.hGet(CACHE_KEYS.USER_LAST_MESSAGE, telegramId);

		if (lastMessage && now - parseInt(lastMessage) < MESSAGE_COOLDOWN) {
			return "COOLDOWN"; // –ö—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–Ω–∏–π
		}

		// –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —ñ –±–∞–ª–∞–Ω—Å
		const count = await redisClient.hGet(CACHE_KEYS.USER_DAILY_MESSAGES, telegramId);
		const currentCount = count ? parseInt(count) : 0;

		// –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å (–∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∫–ª—é—á)
		const balance = await redisClient.hGet(CACHE_KEYS.USER_BALANCE, telegramId);
		let currentBalance = balance ? parseInt(balance) : 0;

		// –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
		const newCount = currentCount + 1;
		await redisClient.hSet(CACHE_KEYS.USER_DAILY_MESSAGES, telegramId, newCount.toString());

		// –ó–±—ñ–ª—å—à—É—î–º–æ –±–∞–ª–∞–Ω—Å, –∞–ª–µ –æ–±–º–µ–∂—É—î–º–æ –π–æ–≥–æ –Ω–∞ —Ä—ñ–≤–Ω—ñ MAX_MESSAGES_PER_PERIOD
		currentBalance = Math.min(currentBalance + 1, MAX_MESSAGES_PER_PERIOD);
		await redisClient.hSet(CACHE_KEYS.USER_BALANCE, telegramId, currentBalance.toString());

		// –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
		await redisClient.hSet(CACHE_KEYS.USER_LAST_MESSAGE, telegramId, now.toString());

		// –û—Ç—Ä–∏–º—É—î–º–æ —á–∞—Å –∫—ñ–Ω—Ü—è –ø–µ—Ä—ñ–æ–¥—É
		const periodEnd = await redisClient.get(CACHE_KEYS.PERIOD_END_TIME);
		if (periodEnd) {
			// –í–∏–∑–Ω–∞—á–∞—î–º–æ —á–∞—Å –¥–æ –∫—ñ–Ω—Ü—è –ø–µ—Ä—ñ–æ–¥—É
			const expirySeconds = Math.floor((parseInt(periodEnd) - now) / 1000);
			if (expirySeconds > 0) {
				// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –∂–∏—Ç—Ç—è –¥–ª—è —Ö–µ—à—ñ–≤
				await redisClient.expire(CACHE_KEYS.USER_DAILY_MESSAGES, expirySeconds);
				await redisClient.expire(CACHE_KEYS.USER_LAST_MESSAGE, expirySeconds);
				await redisClient.expire(CACHE_KEYS.USER_BALANCE, expirySeconds);
			}
		}

		// –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –º–Ω–æ–∂–∏–Ω–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
		await redisClient.sAdd(CACHE_KEYS.PENDING_UPDATES, telegramId.toString());

		return {
			count: newCount,
			balance: currentBalance
		};
	} catch (error) {
		console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è ${telegramId}:`, error);
		return "ERROR";
	}
};
/**
 * –û—Ç—Ä–∏–º—É—î –≤—Å—ñ —â–æ–¥–µ–Ω–Ω—ñ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
 * @returns {Promise<Object>} –û–±'—î–∫—Ç –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
const getAllDailyMessageCounts = async () => {
	try {
		return await redisClient.hGetAll(CACHE_KEYS.USER_DAILY_MESSAGES);
	} catch (error) {
		console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–∏—Ö –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:', error);
		return {};
	}
};

/**
 * –û—Ç—Ä–∏–º—É—î –≤—Å—ñ –±–∞–ª–∞–Ω—Å–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
 * @returns {Promise<Object>} –û–±'—î–∫—Ç –∑ –±–∞–ª–∞–Ω—Å–∞–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
const getAllUserBalances = async () => {
	try {
		return await redisClient.hGetAll(CACHE_KEYS.USER_BALANCE);
	} catch (error) {
		console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:', error);
		return {};
	}
};

/**
 * –û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –æ—á—ñ–∫—É—é—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
 * @returns {Promise<string[]>} –ú–∞—Å–∏–≤ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
 */
const getPendingUpdates = async () => {
	try {
		return await redisClient.sMembers(CACHE_KEYS.PENDING_UPDATES);
	} catch (error) {
		console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', error);
		return [];
	}
};

/**
 * –í–∏–¥–∞–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑—ñ —Å–ø–∏—Å–∫—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
 * @param {string[]} telegramIds –ú–∞—Å–∏–≤ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
 */
const clearPendingUpdates = async (telegramIds) => {
	try {
		if (telegramIds.length > 0) {
			await redisClient.sRem(CACHE_KEYS.PENDING_UPDATES, ...telegramIds);
		}
	} catch (error) {
		console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', error);
	}
};

/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
 * @param {number} limit –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
 * @returns {Promise<Array>} –ú–∞—Å–∏–≤ [telegramId, count]
 */
const getTopMessageUsers = async (limit = 10) => {
	try {
		// –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏
		const messageCountsObj = await getAllDailyMessageCounts();

		// –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –Ω–∞ –º–∞—Å–∏–≤ –ø–∞—Ä [telegramId, count]
		const messageCounts = Object.entries(messageCountsObj)
			.map(([telegramId, count]) => [telegramId, parseInt(count)])
			.sort((a, b) => b[1] - a[1]) // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º
			.slice(0, limit); // –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å

		return messageCounts;
	} catch (error) {
		console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏:', error);
		return [];
	}
};

/**
 * –°–∫–∏–¥–∞—î –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
 */
const resetAllMessageCounts = async () => {
	try {
		await redisClient.del(CACHE_KEYS.USER_DAILY_MESSAGES);
		await redisClient.del(CACHE_KEYS.USER_PROCESSED_MESSAGES);
		await redisClient.del(CACHE_KEYS.USER_BALANCE);  // –°–∫–∏–¥–∞—î–º–æ –±–∞–ª–∞–Ω—Å–∏
		await redisClient.del(CACHE_KEYS.PENDING_UPDATES);
		console.log('‚úÖ –í—Å—ñ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Å–∫–∏–Ω—É—Ç–æ');
		return true;
	} catch (error) {
		console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:', error);
		return false;
	}
};

export {
	CACHE_KEYS,
	redisClient,
	connectRedis,
	loadRegisteredUsers,
	addRegisteredUser,
	isUserRegistered,
	incrementUserMessages,
	getAllDailyMessageCounts,
	getAllUserBalances,
	getPendingUpdates,
	clearPendingUpdates,
	getUserMessageCount,
	getTopMessageUsers,
	resetAllMessageCounts,
	resetMessagePeriod,
	getUserBalance,
	initializeMessagePeriod
};