import cron from 'node-cron';
import { pool } from './db.service.js';
import { Telegraf } from 'telegraf';
import 'dotenv/config';

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–æ—Ç–∞ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–≤—ñ—Ç—ñ–≤
const bot = new Telegraf(process.env.BOT_TOKEN);
const TARGET_CHAT_ID = process.env.TARGET_CHAT_ID;

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –¥—ñ—î –∑–∞—Ä–∞–∑ –ª—ñ—Ç–Ω—ñ–π —á–∞—Å –≤ –£–∫—Ä–∞—ó–Ω—ñ
 * @returns {boolean} true —è–∫—â–æ –∑–∞—Ä–∞–∑ –ª—ñ—Ç–Ω—ñ–π —á–∞—Å
 */
function isUkraineDST() {
	const now = new Date();
	const kyivDate = new Date(now.toLocaleString('en-US', { timeZone: 'Europe/Kiev' }));
	const offsetInMinutes = -kyivDate.getTimezoneOffset();
	return offsetInMinutes > 120;
}

/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Å –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤ –∑ Plan –ø–ª–∞–≥—ñ–Ω–∞
 * @returns {Promise<Array>} –ú–∞—Å–∏–≤ –≥—Ä–∞–≤—Ü—ñ–≤ –∑ –∞–∫—Ç–∏–≤–Ω–∏–º —á–∞—Å–æ–º
 */
async function getAllPlayersActiveTime() {
	const conn = await pool.getConnection();

	try {
		console.log('üìä –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Å—É –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤...');

		// –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Å –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤ (–∑–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å - afk —á–∞—Å)
		const [players] = await conn.query(`
			SELECT 
				pu.name as minecraft_nick,
				pu.uuid,
				u.telegram_id,
				u.game_balance,
				COALESCE(SUM(
					GREATEST(0, ps.session_end - ps.session_start - ps.afk_time)
				) / 60000, 0) as total_active_minutes
			FROM plan_users pu
			JOIN users u ON u.minecraft_nick = pu.name  
			LEFT JOIN plan_sessions ps ON ps.user_id = pu.id
			WHERE u.telegram_id IS NOT NULL
			GROUP BY pu.id, pu.name, pu.uuid, u.telegram_id, u.game_balance
			HAVING total_active_minutes >= 1
			ORDER BY total_active_minutes DESC
		`);

		console.log(`üìä –ó–Ω–∞–π–¥–µ–Ω–æ ${players.length} –≥—Ä–∞–≤—Ü—ñ–≤ –∑ –∞–∫—Ç–∏–≤–Ω–∏–º —á–∞—Å–æ–º –≥—Ä–∏`);
		return players;

	} catch (error) {
		console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Å—É –≥—Ä–∞–≤—Ü—ñ–≤:', error);
		return [];
	} finally {
		conn.release();
	}
}

/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –¥–ª—è –≥—Ä–∞–≤—Ü—ñ–≤
 * @param {Array} telegramIds –ú–∞—Å–∏–≤ telegram_id
 * @returns {Promise<Map>} –ú–∞–ø–∞ telegram_id -> –¥–∞–Ω—ñ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è
 */
async function getLastRewards(telegramIds) {
	if (!telegramIds.length) return new Map();

	const conn = await pool.getConnection();

	try {
		const placeholders = telegramIds.map(() => '?').join(',');

		const [rewards] = await conn.query(`
			SELECT telegram_id, total_active_minutes, coins_awarded, last_awarded_at
			FROM daily_playtime_rewards
			WHERE telegram_id IN (${placeholders})
		`, telegramIds);

		const rewardMap = new Map();
		rewards.forEach(reward => {
			rewardMap.set(reward.telegram_id.toString(), reward);
		});

		console.log(`üìã –ó–Ω–∞–π–¥–µ–Ω–æ ${rewards.length} –∑–∞–ø–∏—Å—ñ–≤ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω—å`);
		return rewardMap;

	} catch (error) {
		console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω—å:', error);
		return new Map();
	} finally {
		conn.release();
	}
}

/**
 * –ù–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–æ—ó–Ω–∏ –≥—Ä–∞–≤—Ü—è–º –∑–∞ –Ω–æ–≤–∏–π –∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Å
 * @param {Array} players –ú–∞—Å–∏–≤ –≥—Ä–∞–≤—Ü—ñ–≤ –∑ –∞–∫—Ç–∏–≤–Ω–∏–º —á–∞—Å–æ–º
 * @returns {Promise<Array>} –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω—å
 */
async function awardActiveTimeCoins(players) {
	if (!players.length) return [];

	const conn = await pool.getConnection();
	const now = Math.floor(Date.now() / 1000);

	try {
		await conn.beginTransaction();
		console.log('üîÑ –ü–æ—á–∞—Ç–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—ó–Ω—ñ–≤...');

		// –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è
		const telegramIds = players.map(p => p.telegram_id);
		const lastRewards = await getLastRewards(telegramIds);

		const awardResults = [];
		let totalNewCoins = 0;

		for (const player of players) {
			const telegramId = player.telegram_id;
			const currentActiveMinutes = Math.floor(player.total_active_minutes);
			const lastReward = lastRewards.get(telegramId.toString());

			let newActiveMinutes = 0;
			let coinsToAward = 0;

			if (lastReward) {
				// –ì—Ä–∞–≤–µ—Ü—å –≤–∂–µ –º–∞—î –∑–∞–ø–∏—Å–∏ - —Ä–∞—Ö—É—î–º–æ —Ä—ñ–∑–Ω–∏—Ü—é
				const lastActiveMinutes = parseInt(lastReward.total_active_minutes);
				newActiveMinutes = Math.max(0, currentActiveMinutes - lastActiveMinutes);
				coinsToAward = newActiveMinutes; // 1 —Ö–≤–∏–ª–∏–Ω–∞ = 1 –∫–æ—ó–Ω

				if (newActiveMinutes > 0) {
					// –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –∑–∞–ø–∏—Å
					await conn.query(`
						UPDATE daily_playtime_rewards 
						SET total_active_minutes = ?, 
							coins_awarded = coins_awarded + ?, 
							last_awarded_at = ?,
							updated_at = ?
						WHERE telegram_id = ?
					`, [currentActiveMinutes, coinsToAward, now, now, telegramId]);

					// –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å –≥—Ä–∞–≤—Ü—è
					await conn.query(`
						UPDATE users 
						SET game_balance = game_balance + ?, 
							updated_at = ? 
						WHERE telegram_id = ?
					`, [coinsToAward, now, telegramId]);

					console.log(`‚úÖ ${player.minecraft_nick}: ${newActiveMinutes} —Ö–≤ ‚Üí ${coinsToAward} GFC`);
				}
			} else {
				// –ù–æ–≤–∏–π –≥—Ä–∞–≤–µ—Ü—å - –Ω–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞ –≤–µ—Å—å –∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Å
				newActiveMinutes = currentActiveMinutes;
				coinsToAward = currentActiveMinutes;

				if (coinsToAward > 0) {
					// –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å
					await conn.query(`
						INSERT INTO daily_playtime_rewards 
						(telegram_id, minecraft_nick, total_active_minutes, coins_awarded, last_awarded_at, created_at, updated_at)
						VALUES (?, ?, ?, ?, ?, ?, ?)
					`, [telegramId, player.minecraft_nick, currentActiveMinutes, coinsToAward, now, now, now]);

					// –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å –≥—Ä–∞–≤—Ü—è
					await conn.query(`
						UPDATE users 
						SET game_balance = game_balance + ?, 
							updated_at = ? 
						WHERE telegram_id = ?
					`, [coinsToAward, now, telegramId]);

					console.log(`üÜï ${player.minecraft_nick}: –Ω–æ–≤–∏–π –≥—Ä–∞–≤–µ—Ü—å ‚Üí ${coinsToAward} GFC`);
				}
			}

			if (coinsToAward > 0) {
				totalNewCoins += coinsToAward;
				awardResults.push({
					telegram_id: telegramId,
					minecraft_nick: player.minecraft_nick,
					total_active_hours: Math.round(currentActiveMinutes / 60 * 10) / 10,
					new_active_minutes: newActiveMinutes,
					coins_awarded: coinsToAward,
					total_coins_awarded: (lastReward?.coins_awarded || 0) + coinsToAward
				});
			}
		}

		await conn.commit();
		console.log(`‚úÖ –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${awardResults.length} –≥—Ä–∞–≤—Ü—ñ–≤, ${totalNewCoins} GFC`);
		return awardResults;

	} catch (error) {
		await conn.rollback();
		console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—ó–Ω—ñ–≤:', error);
		return [];
	} finally {
		conn.release();
	}
}

/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–ø –∞–∫—Ç–∏–≤–Ω–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏
 * @returns {Promise<Array>} –¢–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤ –∑–∞ –Ω–æ–≤–∏–º –∞–∫—Ç–∏–≤–Ω–∏–º —á–∞—Å–æ–º
 */
async function getTop24HourActivePlayers() {
	const conn = await pool.getConnection();

	try {
		// –ß–∞—Å 24 –≥–æ–¥–∏–Ω–∏ —Ç–æ–º—É
		const yesterday = Math.floor(Date.now() / 1000) - (24 * 60 * 60);
		const yesterdayMs = yesterday * 1000; // –¥–ª—è plan_sessions (–º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∏)

		const [topPlayers] = await conn.query(`
			SELECT 
				pu.name as minecraft_nick,
				-- –†–∞—Ö—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Å –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏
				COALESCE(SUM(
					GREATEST(0, ps.session_end - ps.session_start - ps.afk_time)
				) / 60000, 0) as active_minutes_24h
			FROM plan_users pu
			JOIN users u ON u.minecraft_nick = pu.name
			LEFT JOIN plan_sessions ps ON ps.user_id = pu.id AND ps.session_start >= ?
			WHERE u.telegram_id IS NOT NULL
			GROUP BY pu.id, pu.name
			HAVING active_minutes_24h >= 1
			ORDER BY active_minutes_24h DESC
			LIMIT 10
		`, [yesterdayMs]);

		return topPlayers.map(player => ({
			minecraft_nick: player.minecraft_nick,
			active_hours_24h: Math.round(player.active_minutes_24h / 60 * 10) / 10,
			active_minutes_24h: Math.floor(player.active_minutes_24h),
			coins_earned_24h: Math.floor(player.active_minutes_24h) // 1:1 –∫–æ—ó–Ω–∏ –¥–æ —Ö–≤–∏–ª–∏–Ω
		}));

	} catch (error) {
		console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤ –∑–∞ 24 –≥–æ–¥–∏–Ω–∏:', error);
		return [];
	} finally {
		conn.release();
	}
}

/**
 * –§–æ—Ä–º–∞—Ç—É—î –∑–≤—ñ—Ç –ø—Ä–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—ó–Ω—ñ–≤ –∑–∞ –∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Å
 * @param {Array} awardResults –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω—å
 * @param {Array} topPlayers –¢–æ–ø –∞–∫—Ç–∏–≤–Ω–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤ –∑–∞ 24 –≥–æ–¥–∏–Ω–∏
 * @returns {string} –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π –∑–≤—ñ—Ç
 */
function formatPlaytimeReport(awardResults, topPlayers) {
	let message = `üéÆ *–©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç: –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—ó–Ω—ñ–≤ –∑–∞ –∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Å*\n`;
	message += `üìÖ ${new Date().toLocaleDateString('uk-UA', {
		timeZone: 'Europe/Kiev',
		year: 'numeric',
		month: 'long',
		day: 'numeric'
	})}\n\n`;

	// –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	const totalCoinsAwarded = awardResults.reduce((sum, player) => sum + player.coins_awarded, 0);
	const totalActiveHours = awardResults.reduce((sum, player) => sum + (player.new_active_minutes / 60), 0);

	message += `üìä *–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`;
	message += `‚Ä¢ –ì—Ä–∞–≤—Ü—ñ–≤ –æ—Ç—Ä–∏–º–∞–ª–æ –Ω–∞–≥–æ—Ä–æ–¥–∏: ${awardResults.length}\n`;
	message += `‚Ä¢ –ó–∞–≥–∞–ª–æ–º –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ: ${totalCoinsAwarded} GFC\n`;
	message += `‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Å: ${Math.round(totalActiveHours * 10) / 10} –≥–æ–¥–∏–Ω\n\n`;

	if (awardResults.length > 0) {
		// –°–æ—Ä—Ç—É—î–º–æ –≥—Ä–∞–≤—Ü—ñ–≤ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö –∫–æ—ó–Ω—ñ–≤
		const topAwardedPlayers = [...awardResults]
			.sort((a, b) => b.coins_awarded - a.coins_awarded)
			.slice(0, 5);

		message += `üèÜ *–¢–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤ –∑–∞ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏–º–∏ –∫–æ—ó–Ω–∞–º–∏ —Å—å–æ–≥–æ–¥–Ω—ñ:*\n`;
		topAwardedPlayers.forEach((player, index) => {
			const emoji = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üèÖ';
			const newHours = Math.round(player.new_active_minutes / 60 * 10) / 10;
			message += `${emoji} ${index + 1}. \`${player.minecraft_nick}\` - ${newHours}–≥ (–Ω–æ–≤–∏—Ö) - ${player.coins_awarded} GFC\n`;
		});
		message += `\n`;
	}

	message += `\nüí° *1 —Ö–≤–∏–ª–∏–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—ó –≥—Ä–∏ = 1 GFC*`;
	message += `\n‚è∞ –ù–∞—Å—Ç—É–ø–Ω–µ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∑–∞–≤—Ç—Ä–∞`;

	return message;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É —â–æ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—ó–Ω—ñ–≤
 */
async function runDailyPlaytimeRewards() {
	try {
		console.log('üéÆ –ó–∞–ø—É—Å–∫ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—ó–Ω—ñ–≤ –∑–∞ –∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Å...');
		console.log(`üïí –ß–∞—Å –∑–∞–ø—É—Å–∫—É: ${new Date().toLocaleString('uk-UA', { timeZone: 'Europe/Kiev' })}`);

		// 1. –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Å –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤
		const players = await getAllPlayersActiveTime();

		if (players.length === 0) {
			console.log('‚ÑπÔ∏è –ù–µ–º–∞—î –≥—Ä–∞–≤—Ü—ñ–≤ –¥–ª—è –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—ó–Ω—ñ–≤');

			if (TARGET_CHAT_ID) {
				await bot.telegram.sendMessage(
					TARGET_CHAT_ID,
					'üéÆ *–©–æ–¥–µ–Ω–Ω–µ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—ó–Ω—ñ–≤*\n\n–°—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤ –¥–ª—è –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—ó–Ω—ñ–≤.',
					{ parse_mode: 'Markdown' }
				);
			}
			return;
		}

		// 2. –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –∫–æ—ó–Ω–∏ –∑–∞ –Ω–æ–≤–∏–π –∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Å
		const awardResults = await awardActiveTimeCoins(players);

		// 3. –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤ –∑–∞ 24 –≥–æ–¥–∏–Ω–∏
		const topPlayers = await getTop24HourActivePlayers();

		// 4. –§–æ—Ä–º—É—î–º–æ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–≤—ñ—Ç
		const reportMessage = formatPlaytimeReport(awardResults, topPlayers);

		if (TARGET_CHAT_ID) {
			await bot.telegram.sendMessage(TARGET_CHAT_ID, reportMessage, { parse_mode: 'Markdown' });
			console.log('‚úÖ –ó–≤—ñ—Ç –ø—Ä–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—ó–Ω—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç');
		} else {
			console.log('‚ö†Ô∏è TARGET_CHAT_ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ - –∑–≤—ñ—Ç –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ');
		}

		console.log('‚úÖ –©–æ–¥–µ–Ω–Ω–µ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—ó–Ω—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');

	} catch (error) {
		console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—ó–Ω—ñ–≤:', error);

		// –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≤ —á–∞—Ç
		if (TARGET_CHAT_ID) {
			try {
				await bot.telegram.sendMessage(
					TARGET_CHAT_ID,
					`‚ùå *–ü–æ–º–∏–ª–∫–∞ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—ó–Ω—ñ–≤*\n\n–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—ó–Ω—ñ–≤ –∑–∞ –∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Å: ${error.message}`,
					{ parse_mode: 'Markdown' }
				);
			} catch (sendError) {
				console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É:', sendError);
			}
		}
	}
}

/**
 * –ù–∞–ª–∞—à—Ç–æ–≤—É—î cron-–∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –æ 15:00 –∑–∞ –ö–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º
 */
function setupPlaytimeRewardsSchedule() {
	// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –∑–∞–ø—É—Å–∫—É - 15:00 –∑–∞ –∫–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º
	const isDST = isUkraineDST();

	// 12:00 UTC = 15:00 –ö–∏—ó–≤ –≤ –ª—ñ—Ç–Ω—ñ–π —á–∞—Å (UTC+3)
	// 13:00 UTC = 15:00 –ö–∏—ó–≤ –≤ –∑–∏–º–æ–≤–∏–π —á–∞—Å (UTC+2)
	const cronTime = isDST ? '0 12 * * *' : '0 13 * * *';

	console.log(`‚è±Ô∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—ó–Ω—ñ–≤: ${cronTime} (UTC) = 15:00 (–ö–∏—ó–≤)`);

	// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ cron-–∑–∞–≤–¥–∞–Ω–Ω—è
	cron.schedule(cronTime, runDailyPlaytimeRewards, {
		timezone: 'Etc/UTC'
	});

	console.log('‚úÖ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—ó–Ω—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ');
}

/**
 * –†—É—á–Ω–∏–π –∑–∞–ø—É—Å–∫ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
 */
async function runPlaytimeRewardsManually() {
	console.log('üîÑ –†—É—á–Ω–∏–π –∑–∞–ø—É—Å–∫ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—ó–Ω—ñ–≤ –∑–∞ –∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Å...');
	await runDailyPlaytimeRewards();
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É
 */
function checkPlaytimeScheduleSetup() {
	const isDST = isUkraineDST();
	const kyivTime = new Date().toLocaleString('uk-UA', { timeZone: 'Europe/Kiev' });
	const utcTime = new Date().toLocaleString('uk-UA', { timeZone: 'UTC' });

	console.log(`üïí –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å –≤ –ö–∏—î–≤—ñ: ${kyivTime}`);
	console.log(`üïí –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å UTC: ${utcTime}`);
	console.log(`üîç –õ—ñ—Ç–Ω—ñ–π —á–∞—Å –≤ –£–∫—Ä–∞—ó–Ω—ñ: ${isDST ? '–¢–∞–∫' : '–ù—ñ'}`);
	console.log(`‚è∞ –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –Ω–∞: 15:00 (–ö–∏—ó–≤) / ${isDST ? '12:00' : '13:00'} (UTC)`);
}

export {
	setupPlaytimeRewardsSchedule,
	runPlaytimeRewardsManually,
	runDailyPlaytimeRewards,
	checkPlaytimeScheduleSetup,
	getAllPlayersActiveTime,
	getTop24HourActivePlayers
};