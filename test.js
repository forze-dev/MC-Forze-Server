import multer from 'multer';
import path from 'path';
import sharp from 'sharp';
import fs from 'fs';
import { v4 as uuidv4 } from 'uuid';

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
const storage = multer.diskStorage({
	destination: (req, file, cb) => {
		const uploadDir = 'uploads/temp';

		// –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó, —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
		if (!fs.existsSync('uploads')) {
			fs.mkdirSync('uploads', { recursive: true });
		}

		if (!fs.existsSync(uploadDir)) {
			fs.mkdirSync(uploadDir, { recursive: true });
		}

		cb(null, uploadDir);
	},
	filename: (req, file, cb) => {
		// –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É –∑ UUID
		const uniqueFilename = `${uuidv4()}${path.extname(file.originalname)}`;
		cb(null, uniqueFilename);
	}
});

// –§—ñ–ª—å—Ç—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∏–ø—É —Ñ–∞–π–ª—É
const fileFilter = (req, file, cb) => {
	const allowedTypes = ['image/jpeg', 'image/png', 'image/webp', 'image/gif'];

	if (allowedTypes.includes(file.mimetype)) {
		cb(null, true);
	} else {
		cb(new Error('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É. –î–æ–∑–≤–æ–ª–µ–Ω–æ —Ç—ñ–ª—å–∫–∏ JPEG, PNG, WebP —Ç–∞ GIF!'), false);
	}
};

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Multer
const upload = multer({
	storage: storage,
	limits: {
		fileSize: 5 * 1024 * 1024, // 5MB –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É
		files: 5 // –ú–∞–∫—Å–∏–º—É–º 5 —Ñ–∞–π–ª—ñ–≤ –∑–∞ —Ä–∞–∑
	},
	fileFilter: fileFilter
});

// Middleware –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó —É WebP
export const processProductImages = async (req, res, next) => {
	try {
		// –Ø–∫—â–æ —Ñ–∞–π–ª–∏ –Ω–µ –±—É–ª–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ–±—Ä–æ–±–∫—É
		if (!req.files || req.files.length === 0) {
			console.log('üìÅ –§–∞–π–ª–∏ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –∑–æ–±—Ä–∞–∂–µ–Ω—å');
			return next();
		}

		console.log(`üì∏ –ü–æ—á–∞—Ç–æ –æ–±—Ä–æ–±–∫—É ${req.files.length} –∑–æ–±—Ä–∞–∂–µ–Ω—å`);

		const imageUrls = [];
		const targetDir = 'uploads/products';

		// –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω—å –ø—Ä–æ–¥—É–∫—Ç—ñ–≤, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î
		if (!fs.existsSync(targetDir)) {
			fs.mkdirSync(targetDir, { recursive: true });
			console.log(`üìÅ –°—Ç–≤–æ—Ä–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é: ${targetDir}`);
		}

		// –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
		for (let i = 0; i < req.files.length; i++) {
			const file = req.files[i];
			console.log(`üîÑ –û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É ${i + 1}/${req.files.length}: ${file.originalname}`);

			try {
				// –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è –¥–ª—è –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É
				const outputFilename = `${uuidv4()}.webp`;
				const outputPath = path.join(targetDir, outputFilename);

				console.log(`üìù –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ WebP: ${outputFilename}`);

				// –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É WebP –∑ —è–∫—ñ—Å—Ç—é 80% —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—î—é —Ä–æ–∑–º—ñ—Ä—É
				await sharp(file.path)
					.resize(800, 800, {
						fit: 'inside',
						withoutEnlargement: true
					}) // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä 800x800, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—ó
					.webp({
						quality: 80,
						effort: 4 // –ö—Ä–∞—â–∏–π —Å—Ç–∏—Å–∫ (0-6, –¥–µ 6 –Ω–∞–π–∫—Ä–∞—â–∏–π)
					})
					.toFile(outputPath);

				console.log(`‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${outputPath}`);

				// –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
				try {
					fs.unlinkSync(file.path);
					console.log(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª: ${file.path}`);
				} catch (unlinkError) {
					console.warn(`‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª: ${file.path}`, unlinkError);
				}

				// –î–æ–¥–∞—î–º–æ URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ –º–∞—Å–∏–≤—É (–±–µ–∑ public –≤ —à–ª—è—Ö—É)
				const imageUrl = `/uploads/products/${outputFilename}`;
				imageUrls.push(imageUrl);

				console.log(`üîó –î–æ–¥–∞–Ω–æ URL: ${imageUrl}`);

			} catch (processError) {
				console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É ${file.originalname}:`, processError);

				// –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –Ω–∞–≤—ñ—Ç—å –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
				try {
					fs.unlinkSync(file.path);
				} catch (unlinkError) {
					console.warn(`‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏: ${file.path}`);
				}

				// –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –æ–±—Ä–æ–±–∫—É —ñ–Ω—à–∏—Ö —Ñ–∞–π–ª—ñ–≤, –∞–ª–µ –ª–æ–≥—É—î–º–æ –ø–æ–º–∏–ª–∫—É
				continue;
			}
		}

		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –±—É–ª–∏ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω—ñ —Ñ–∞–π–ª–∏
		if (imageUrls.length === 0) {
			console.warn('‚ö†Ô∏è –ñ–æ–¥–µ–Ω —Ñ–∞–π–ª –Ω–µ –±—É–≤ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π');
		} else {
			console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ ${imageUrls.length} –∑–æ–±—Ä–∞–∂–µ–Ω—å`);
		}

		// –î–æ–¥–∞—î–º–æ –º–∞—Å–∏–≤ URL –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–æ –∑–∞–ø–∏—Ç—É –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä—ñ
		req.processedImages = imageUrls;
		next();

	} catch (error) {
		console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å:', error);

		// –û—á–∏—â—É—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–Ω—ñ–π –ø–æ–º–∏–ª—Ü—ñ
		if (req.files && req.files.length > 0) {
			req.files.forEach(file => {
				try {
					if (fs.existsSync(file.path)) {
						fs.unlinkSync(file.path);
						console.log(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏: ${file.path}`);
					}
				} catch (cleanupError) {
					console.warn(`‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ: ${file.path}`);
				}
			});
		}

		return res.status(500).json({
			message: '–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å',
			error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
		});
	}
};

// Middleware –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–Ω–æ–∂–∏–Ω–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å
export const uploadProductImages = upload.array('images', 5); // –º–∞–∫—Å–∏–º—É–º 5 –∑–æ–±—Ä–∞–∂–µ–Ω—å

// –î–æ–¥–∞—Ç–∫–æ–≤—ñ utility —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ñ–∞–π–ª–∞–º–∏

/**
 * –í–∏–¥–∞–ª—è—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
 * @param {string|string[]} imagePaths - –®–ª—è—Ö(–∏) –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å
 */
export const deleteImages = (imagePaths) => {
	const paths = Array.isArray(imagePaths) ? imagePaths : [imagePaths];

	paths.forEach(imagePath => {
		try {
			// –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å–ª–µ—à, —è–∫—â–æ —î
			const cleanPath = imagePath.startsWith('/') ? imagePath.slice(1) : imagePath;
			const fullPath = path.join(process.cwd(), cleanPath);

			if (fs.existsSync(fullPath)) {
				fs.unlinkSync(fullPath);
				console.log(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: ${fullPath}`);
			} else {
				console.warn(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ${fullPath}`);
			}
		} catch (error) {
			console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è ${imagePath}:`, error);
		}
	});
};

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —ñ—Å–Ω—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 * @param {string} imagePath - –®–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 * @returns {boolean}
 */
export const imageExists = (imagePath) => {
	try {
		const cleanPath = imagePath.startsWith('/') ? imagePath.slice(1) : imagePath;
		const fullPath = path.join(process.cwd(), cleanPath);
		return fs.existsSync(fullPath);
	} catch (error) {
		console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É ${imagePath}:`, error);
		return false;
	}
};

/**
 * –û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 * @param {string} imagePath - –®–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 * @returns {Promise<Object|null>}
 */
export const getImageInfo = async (imagePath) => {
	try {
		const cleanPath = imagePath.startsWith('/') ? imagePath.slice(1) : imagePath;
		const fullPath = path.join(process.cwd(), cleanPath);

		if (!fs.existsSync(fullPath)) {
			return null;
		}

		const stats = fs.statSync(fullPath);
		const metadata = await sharp(fullPath).metadata();

		return {
			path: imagePath,
			size: stats.size,
			width: metadata.width,
			height: metadata.height,
			format: metadata.format,
			created: stats.birthtime,
			modified: stats.mtime
		};
	} catch (error) {
		console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è ${imagePath}:`, error);
		return null;
	}
};

/**
 * –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤ (–º–æ–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –ø–æ cron)
 */
export const cleanupTempFiles = () => {
	const tempDir = 'uploads/temp';

	if (!fs.existsSync(tempDir)) {
		return;
	}

	try {
		const files = fs.readdirSync(tempDir);
		const now = Date.now();
		const maxAge = 24 * 60 * 60 * 1000; // 24 –≥–æ–¥–∏–Ω–∏

		files.forEach(file => {
			const filePath = path.join(tempDir, file);
			const stats = fs.statSync(filePath);

			if (now - stats.mtime.getTime() > maxAge) {
				fs.unlinkSync(filePath);
				console.log(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–∏–π —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª: ${filePath}`);
			}
		});
	} catch (error) {
		console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤:', error);
	}
};

// Middleware –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
export const handleUploadError = (error, req, res, next) => {
	if (error instanceof multer.MulterError) {
		switch (error.code) {
			case 'LIMIT_FILE_SIZE':
				return res.status(400).json({
					message: '–§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: 5MB'
				});
			case 'LIMIT_FILE_COUNT':
				return res.status(400).json({
					message: '–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —Ñ–∞–π–ª—ñ–≤. –ú–∞–∫—Å–∏–º—É–º: 5 —Ñ–∞–π–ª—ñ–≤'
				});
			case 'LIMIT_UNEXPECTED_FILE':
				return res.status(400).json({
					message: '–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–µ –ø–æ–ª–µ —Ñ–∞–π–ª—É'
				});
			default:
				return res.status(400).json({
					message: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É',
					error: error.message
				});
		}
	}

	if (error.message.includes('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É')) {
		return res.status(400).json({
			message: error.message
		});
	}

	next(error);
};