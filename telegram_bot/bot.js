import { Telegraf, session, Scenes } from 'telegraf';
import 'dotenv/config';

import startCommand from './commands/start.command.js';
import helpCommand from './commands/help.command.js';
import registerCommand from './commands/register.command.js';
import refferCommand from './commands/reffer.command.js';
import statisticCommand from './commands/statistic.command.js';

import { registerScene } from './scenes/register.scene.js';
import { handleMessage } from './handlers/messageCounter.handler.js';

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
if (!process.env.BOT_TOKEN) {
	console.error('‚ùå –ü–æ–º–∏–ª–∫–∞: BOT_TOKEN –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è');
	process.exit(1);
}

const tgBot = new Telegraf(process.env.BOT_TOKEN);

// Scenes setup
const stage = new Scenes.Stage([registerScene /*, feedbackScene */]);
tgBot.use(session());
tgBot.use(stage.middleware());

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
tgBot.catch((err, ctx) => {
	console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ Telegraf: ${err}`);
	ctx.reply('‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
});

// –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
tgBot.use((ctx, next) => {
	const user = ctx.from ? `${ctx.from.id} (${ctx.from.username || 'no username'})` : '–Ω–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á';
	const messageType = ctx.updateType || '–Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø';

	console.log(`üì© –û—Ç—Ä–∏–º–∞–Ω–æ ${messageType} –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${user}`);
	return next();
});

// –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É
tgBot.use(handleMessage);

// –ö–æ–º–∞–Ω–¥–∏
tgBot.command('start', startCommand);
tgBot.command('help', helpCommand);
tgBot.command('register', registerCommand);
tgBot.command('reffer', refferCommand);
tgBot.command('statistic', statisticCommand);

const startBot = async () => {
	try {
		// –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
		await tgBot.launch();
		console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ');
		console.log(`üîó API URL: ${process.env.API_URL || 'http://localhost:4000'}`);
	} catch (err) {
		console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞:', err);
	}
}

// –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏
process.once('SIGINT', () => {
	console.log('üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª SIGINT, –∑—É–ø–∏–Ω—è—é –±–æ—Ç–∞...');
	tgBot.stop('SIGINT');
});

process.once('SIGTERM', () => {
	console.log('üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª SIGTERM, –∑—É–ø–∏–Ω—è—é –±–æ—Ç–∞...');
	tgBot.stop('SIGTERM');
});

export default startBot;